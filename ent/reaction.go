// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/kayprogrammer/socialnet-v4/ent/comment"
	"github.com/kayprogrammer/socialnet-v4/ent/post"
	"github.com/kayprogrammer/socialnet-v4/ent/reaction"
	"github.com/kayprogrammer/socialnet-v4/ent/reply"
	"github.com/kayprogrammer/socialnet-v4/ent/user"
)

// Reaction is the model entity for the Reaction schema.
type Reaction struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// Rtype holds the value of the "rtype" field.
	Rtype string `json:"rtype,omitempty"`
	// PostID holds the value of the "post_id" field.
	PostID *uuid.UUID `json:"post_id,omitempty"`
	// CommentID holds the value of the "comment_id" field.
	CommentID *uuid.UUID `json:"comment_id,omitempty"`
	// ReplyID holds the value of the "reply_id" field.
	ReplyID *uuid.UUID `json:"reply_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ReactionQuery when eager-loading is set.
	Edges        ReactionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ReactionEdges holds the relations/edges for other nodes in the graph.
type ReactionEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Post holds the value of the post edge.
	Post *Post `json:"post,omitempty"`
	// Comment holds the value of the comment edge.
	Comment *Comment `json:"comment,omitempty"`
	// Reply holds the value of the reply edge.
	Reply *Reply `json:"reply,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReactionEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// PostOrErr returns the Post value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReactionEdges) PostOrErr() (*Post, error) {
	if e.loadedTypes[1] {
		if e.Post == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: post.Label}
		}
		return e.Post, nil
	}
	return nil, &NotLoadedError{edge: "post"}
}

// CommentOrErr returns the Comment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReactionEdges) CommentOrErr() (*Comment, error) {
	if e.loadedTypes[2] {
		if e.Comment == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: comment.Label}
		}
		return e.Comment, nil
	}
	return nil, &NotLoadedError{edge: "comment"}
}

// ReplyOrErr returns the Reply value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReactionEdges) ReplyOrErr() (*Reply, error) {
	if e.loadedTypes[3] {
		if e.Reply == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: reply.Label}
		}
		return e.Reply, nil
	}
	return nil, &NotLoadedError{edge: "reply"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Reaction) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case reaction.FieldPostID, reaction.FieldCommentID, reaction.FieldReplyID:
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case reaction.FieldRtype:
			values[i] = new(sql.NullString)
		case reaction.FieldCreatedAt, reaction.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case reaction.FieldID, reaction.FieldUserID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Reaction fields.
func (r *Reaction) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case reaction.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				r.ID = *value
			}
		case reaction.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				r.CreatedAt = value.Time
			}
		case reaction.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				r.UpdatedAt = value.Time
			}
		case reaction.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				r.UserID = *value
			}
		case reaction.FieldRtype:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field rtype", values[i])
			} else if value.Valid {
				r.Rtype = value.String
			}
		case reaction.FieldPostID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field post_id", values[i])
			} else if value.Valid {
				r.PostID = new(uuid.UUID)
				*r.PostID = *value.S.(*uuid.UUID)
			}
		case reaction.FieldCommentID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field comment_id", values[i])
			} else if value.Valid {
				r.CommentID = new(uuid.UUID)
				*r.CommentID = *value.S.(*uuid.UUID)
			}
		case reaction.FieldReplyID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field reply_id", values[i])
			} else if value.Valid {
				r.ReplyID = new(uuid.UUID)
				*r.ReplyID = *value.S.(*uuid.UUID)
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Reaction.
// This includes values selected through modifiers, order, etc.
func (r *Reaction) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Reaction entity.
func (r *Reaction) QueryUser() *UserQuery {
	return NewReactionClient(r.config).QueryUser(r)
}

// QueryPost queries the "post" edge of the Reaction entity.
func (r *Reaction) QueryPost() *PostQuery {
	return NewReactionClient(r.config).QueryPost(r)
}

// QueryComment queries the "comment" edge of the Reaction entity.
func (r *Reaction) QueryComment() *CommentQuery {
	return NewReactionClient(r.config).QueryComment(r)
}

// QueryReply queries the "reply" edge of the Reaction entity.
func (r *Reaction) QueryReply() *ReplyQuery {
	return NewReactionClient(r.config).QueryReply(r)
}

// Update returns a builder for updating this Reaction.
// Note that you need to call Reaction.Unwrap() before calling this method if this Reaction
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Reaction) Update() *ReactionUpdateOne {
	return NewReactionClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Reaction entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Reaction) Unwrap() *Reaction {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Reaction is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Reaction) String() string {
	var builder strings.Builder
	builder.WriteString("Reaction(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("created_at=")
	builder.WriteString(r.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(r.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", r.UserID))
	builder.WriteString(", ")
	builder.WriteString("rtype=")
	builder.WriteString(r.Rtype)
	builder.WriteString(", ")
	if v := r.PostID; v != nil {
		builder.WriteString("post_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := r.CommentID; v != nil {
		builder.WriteString("comment_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := r.ReplyID; v != nil {
		builder.WriteString("reply_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Reactions is a parsable slice of Reaction.
type Reactions []*Reaction
