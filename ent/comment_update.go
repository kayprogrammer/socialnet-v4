// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/kayprogrammer/socialnet-v4/ent/comment"
	"github.com/kayprogrammer/socialnet-v4/ent/notification"
	"github.com/kayprogrammer/socialnet-v4/ent/post"
	"github.com/kayprogrammer/socialnet-v4/ent/predicate"
	"github.com/kayprogrammer/socialnet-v4/ent/reaction"
	"github.com/kayprogrammer/socialnet-v4/ent/reply"
	"github.com/kayprogrammer/socialnet-v4/ent/user"
)

// CommentUpdate is the builder for updating Comment entities.
type CommentUpdate struct {
	config
	hooks    []Hook
	mutation *CommentMutation
}

// Where appends a list predicates to the CommentUpdate builder.
func (cu *CommentUpdate) Where(ps ...predicate.Comment) *CommentUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetCreatedAt sets the "created_at" field.
func (cu *CommentUpdate) SetCreatedAt(t time.Time) *CommentUpdate {
	cu.mutation.SetCreatedAt(t)
	return cu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableCreatedAt(t *time.Time) *CommentUpdate {
	if t != nil {
		cu.SetCreatedAt(*t)
	}
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CommentUpdate) SetUpdatedAt(t time.Time) *CommentUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetText sets the "text" field.
func (cu *CommentUpdate) SetText(s string) *CommentUpdate {
	cu.mutation.SetText(s)
	return cu
}

// SetNillableText sets the "text" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableText(s *string) *CommentUpdate {
	if s != nil {
		cu.SetText(*s)
	}
	return cu
}

// SetSlug sets the "slug" field.
func (cu *CommentUpdate) SetSlug(s string) *CommentUpdate {
	cu.mutation.SetSlug(s)
	return cu
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableSlug(s *string) *CommentUpdate {
	if s != nil {
		cu.SetSlug(*s)
	}
	return cu
}

// SetAuthorID sets the "author_id" field.
func (cu *CommentUpdate) SetAuthorID(u uuid.UUID) *CommentUpdate {
	cu.mutation.SetAuthorID(u)
	return cu
}

// SetNillableAuthorID sets the "author_id" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableAuthorID(u *uuid.UUID) *CommentUpdate {
	if u != nil {
		cu.SetAuthorID(*u)
	}
	return cu
}

// SetPostID sets the "post_id" field.
func (cu *CommentUpdate) SetPostID(u uuid.UUID) *CommentUpdate {
	cu.mutation.SetPostID(u)
	return cu
}

// SetNillablePostID sets the "post_id" field if the given value is not nil.
func (cu *CommentUpdate) SetNillablePostID(u *uuid.UUID) *CommentUpdate {
	if u != nil {
		cu.SetPostID(*u)
	}
	return cu
}

// AddReactionIDs adds the "reactions" edge to the Reaction entity by IDs.
func (cu *CommentUpdate) AddReactionIDs(ids ...uuid.UUID) *CommentUpdate {
	cu.mutation.AddReactionIDs(ids...)
	return cu
}

// AddReactions adds the "reactions" edges to the Reaction entity.
func (cu *CommentUpdate) AddReactions(r ...*Reaction) *CommentUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cu.AddReactionIDs(ids...)
}

// SetAuthor sets the "author" edge to the User entity.
func (cu *CommentUpdate) SetAuthor(u *User) *CommentUpdate {
	return cu.SetAuthorID(u.ID)
}

// SetPost sets the "post" edge to the Post entity.
func (cu *CommentUpdate) SetPost(p *Post) *CommentUpdate {
	return cu.SetPostID(p.ID)
}

// AddReplyIDs adds the "replies" edge to the Reply entity by IDs.
func (cu *CommentUpdate) AddReplyIDs(ids ...uuid.UUID) *CommentUpdate {
	cu.mutation.AddReplyIDs(ids...)
	return cu
}

// AddReplies adds the "replies" edges to the Reply entity.
func (cu *CommentUpdate) AddReplies(r ...*Reply) *CommentUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cu.AddReplyIDs(ids...)
}

// AddNotificationIDs adds the "notifications" edge to the Notification entity by IDs.
func (cu *CommentUpdate) AddNotificationIDs(ids ...uuid.UUID) *CommentUpdate {
	cu.mutation.AddNotificationIDs(ids...)
	return cu
}

// AddNotifications adds the "notifications" edges to the Notification entity.
func (cu *CommentUpdate) AddNotifications(n ...*Notification) *CommentUpdate {
	ids := make([]uuid.UUID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return cu.AddNotificationIDs(ids...)
}

// Mutation returns the CommentMutation object of the builder.
func (cu *CommentUpdate) Mutation() *CommentMutation {
	return cu.mutation
}

// ClearReactions clears all "reactions" edges to the Reaction entity.
func (cu *CommentUpdate) ClearReactions() *CommentUpdate {
	cu.mutation.ClearReactions()
	return cu
}

// RemoveReactionIDs removes the "reactions" edge to Reaction entities by IDs.
func (cu *CommentUpdate) RemoveReactionIDs(ids ...uuid.UUID) *CommentUpdate {
	cu.mutation.RemoveReactionIDs(ids...)
	return cu
}

// RemoveReactions removes "reactions" edges to Reaction entities.
func (cu *CommentUpdate) RemoveReactions(r ...*Reaction) *CommentUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cu.RemoveReactionIDs(ids...)
}

// ClearAuthor clears the "author" edge to the User entity.
func (cu *CommentUpdate) ClearAuthor() *CommentUpdate {
	cu.mutation.ClearAuthor()
	return cu
}

// ClearPost clears the "post" edge to the Post entity.
func (cu *CommentUpdate) ClearPost() *CommentUpdate {
	cu.mutation.ClearPost()
	return cu
}

// ClearReplies clears all "replies" edges to the Reply entity.
func (cu *CommentUpdate) ClearReplies() *CommentUpdate {
	cu.mutation.ClearReplies()
	return cu
}

// RemoveReplyIDs removes the "replies" edge to Reply entities by IDs.
func (cu *CommentUpdate) RemoveReplyIDs(ids ...uuid.UUID) *CommentUpdate {
	cu.mutation.RemoveReplyIDs(ids...)
	return cu
}

// RemoveReplies removes "replies" edges to Reply entities.
func (cu *CommentUpdate) RemoveReplies(r ...*Reply) *CommentUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cu.RemoveReplyIDs(ids...)
}

// ClearNotifications clears all "notifications" edges to the Notification entity.
func (cu *CommentUpdate) ClearNotifications() *CommentUpdate {
	cu.mutation.ClearNotifications()
	return cu
}

// RemoveNotificationIDs removes the "notifications" edge to Notification entities by IDs.
func (cu *CommentUpdate) RemoveNotificationIDs(ids ...uuid.UUID) *CommentUpdate {
	cu.mutation.RemoveNotificationIDs(ids...)
	return cu
}

// RemoveNotifications removes "notifications" edges to Notification entities.
func (cu *CommentUpdate) RemoveNotifications(n ...*Notification) *CommentUpdate {
	ids := make([]uuid.UUID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return cu.RemoveNotificationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CommentUpdate) Save(ctx context.Context) (int, error) {
	cu.defaults()
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CommentUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CommentUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CommentUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CommentUpdate) defaults() {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		v := comment.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CommentUpdate) check() error {
	if v, ok := cu.mutation.Text(); ok {
		if err := comment.TextValidator(v); err != nil {
			return &ValidationError{Name: "text", err: fmt.Errorf(`ent: validator failed for field "Comment.text": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Slug(); ok {
		if err := comment.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`ent: validator failed for field "Comment.slug": %w`, err)}
		}
	}
	if _, ok := cu.mutation.AuthorID(); cu.mutation.AuthorCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Comment.author"`)
	}
	if _, ok := cu.mutation.PostID(); cu.mutation.PostCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Comment.post"`)
	}
	return nil
}

func (cu *CommentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(comment.Table, comment.Columns, sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUUID))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.CreatedAt(); ok {
		_spec.SetField(comment.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(comment.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.Text(); ok {
		_spec.SetField(comment.FieldText, field.TypeString, value)
	}
	if value, ok := cu.mutation.Slug(); ok {
		_spec.SetField(comment.FieldSlug, field.TypeString, value)
	}
	if cu.mutation.ReactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comment.ReactionsTable,
			Columns: []string{comment.ReactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reaction.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedReactionsIDs(); len(nodes) > 0 && !cu.mutation.ReactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comment.ReactionsTable,
			Columns: []string{comment.ReactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reaction.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ReactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comment.ReactionsTable,
			Columns: []string{comment.ReactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reaction.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.AuthorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comment.AuthorTable,
			Columns: []string{comment.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comment.AuthorTable,
			Columns: []string{comment.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.PostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comment.PostTable,
			Columns: []string{comment.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.PostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comment.PostTable,
			Columns: []string{comment.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.RepliesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comment.RepliesTable,
			Columns: []string{comment.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reply.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedRepliesIDs(); len(nodes) > 0 && !cu.mutation.RepliesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comment.RepliesTable,
			Columns: []string{comment.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reply.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RepliesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comment.RepliesTable,
			Columns: []string{comment.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reply.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comment.NotificationsTable,
			Columns: []string{comment.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedNotificationsIDs(); len(nodes) > 0 && !cu.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comment.NotificationsTable,
			Columns: []string{comment.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.NotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comment.NotificationsTable,
			Columns: []string{comment.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{comment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CommentUpdateOne is the builder for updating a single Comment entity.
type CommentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CommentMutation
}

// SetCreatedAt sets the "created_at" field.
func (cuo *CommentUpdateOne) SetCreatedAt(t time.Time) *CommentUpdateOne {
	cuo.mutation.SetCreatedAt(t)
	return cuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableCreatedAt(t *time.Time) *CommentUpdateOne {
	if t != nil {
		cuo.SetCreatedAt(*t)
	}
	return cuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CommentUpdateOne) SetUpdatedAt(t time.Time) *CommentUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetText sets the "text" field.
func (cuo *CommentUpdateOne) SetText(s string) *CommentUpdateOne {
	cuo.mutation.SetText(s)
	return cuo
}

// SetNillableText sets the "text" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableText(s *string) *CommentUpdateOne {
	if s != nil {
		cuo.SetText(*s)
	}
	return cuo
}

// SetSlug sets the "slug" field.
func (cuo *CommentUpdateOne) SetSlug(s string) *CommentUpdateOne {
	cuo.mutation.SetSlug(s)
	return cuo
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableSlug(s *string) *CommentUpdateOne {
	if s != nil {
		cuo.SetSlug(*s)
	}
	return cuo
}

// SetAuthorID sets the "author_id" field.
func (cuo *CommentUpdateOne) SetAuthorID(u uuid.UUID) *CommentUpdateOne {
	cuo.mutation.SetAuthorID(u)
	return cuo
}

// SetNillableAuthorID sets the "author_id" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableAuthorID(u *uuid.UUID) *CommentUpdateOne {
	if u != nil {
		cuo.SetAuthorID(*u)
	}
	return cuo
}

// SetPostID sets the "post_id" field.
func (cuo *CommentUpdateOne) SetPostID(u uuid.UUID) *CommentUpdateOne {
	cuo.mutation.SetPostID(u)
	return cuo
}

// SetNillablePostID sets the "post_id" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillablePostID(u *uuid.UUID) *CommentUpdateOne {
	if u != nil {
		cuo.SetPostID(*u)
	}
	return cuo
}

// AddReactionIDs adds the "reactions" edge to the Reaction entity by IDs.
func (cuo *CommentUpdateOne) AddReactionIDs(ids ...uuid.UUID) *CommentUpdateOne {
	cuo.mutation.AddReactionIDs(ids...)
	return cuo
}

// AddReactions adds the "reactions" edges to the Reaction entity.
func (cuo *CommentUpdateOne) AddReactions(r ...*Reaction) *CommentUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cuo.AddReactionIDs(ids...)
}

// SetAuthor sets the "author" edge to the User entity.
func (cuo *CommentUpdateOne) SetAuthor(u *User) *CommentUpdateOne {
	return cuo.SetAuthorID(u.ID)
}

// SetPost sets the "post" edge to the Post entity.
func (cuo *CommentUpdateOne) SetPost(p *Post) *CommentUpdateOne {
	return cuo.SetPostID(p.ID)
}

// AddReplyIDs adds the "replies" edge to the Reply entity by IDs.
func (cuo *CommentUpdateOne) AddReplyIDs(ids ...uuid.UUID) *CommentUpdateOne {
	cuo.mutation.AddReplyIDs(ids...)
	return cuo
}

// AddReplies adds the "replies" edges to the Reply entity.
func (cuo *CommentUpdateOne) AddReplies(r ...*Reply) *CommentUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cuo.AddReplyIDs(ids...)
}

// AddNotificationIDs adds the "notifications" edge to the Notification entity by IDs.
func (cuo *CommentUpdateOne) AddNotificationIDs(ids ...uuid.UUID) *CommentUpdateOne {
	cuo.mutation.AddNotificationIDs(ids...)
	return cuo
}

// AddNotifications adds the "notifications" edges to the Notification entity.
func (cuo *CommentUpdateOne) AddNotifications(n ...*Notification) *CommentUpdateOne {
	ids := make([]uuid.UUID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return cuo.AddNotificationIDs(ids...)
}

// Mutation returns the CommentMutation object of the builder.
func (cuo *CommentUpdateOne) Mutation() *CommentMutation {
	return cuo.mutation
}

// ClearReactions clears all "reactions" edges to the Reaction entity.
func (cuo *CommentUpdateOne) ClearReactions() *CommentUpdateOne {
	cuo.mutation.ClearReactions()
	return cuo
}

// RemoveReactionIDs removes the "reactions" edge to Reaction entities by IDs.
func (cuo *CommentUpdateOne) RemoveReactionIDs(ids ...uuid.UUID) *CommentUpdateOne {
	cuo.mutation.RemoveReactionIDs(ids...)
	return cuo
}

// RemoveReactions removes "reactions" edges to Reaction entities.
func (cuo *CommentUpdateOne) RemoveReactions(r ...*Reaction) *CommentUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cuo.RemoveReactionIDs(ids...)
}

// ClearAuthor clears the "author" edge to the User entity.
func (cuo *CommentUpdateOne) ClearAuthor() *CommentUpdateOne {
	cuo.mutation.ClearAuthor()
	return cuo
}

// ClearPost clears the "post" edge to the Post entity.
func (cuo *CommentUpdateOne) ClearPost() *CommentUpdateOne {
	cuo.mutation.ClearPost()
	return cuo
}

// ClearReplies clears all "replies" edges to the Reply entity.
func (cuo *CommentUpdateOne) ClearReplies() *CommentUpdateOne {
	cuo.mutation.ClearReplies()
	return cuo
}

// RemoveReplyIDs removes the "replies" edge to Reply entities by IDs.
func (cuo *CommentUpdateOne) RemoveReplyIDs(ids ...uuid.UUID) *CommentUpdateOne {
	cuo.mutation.RemoveReplyIDs(ids...)
	return cuo
}

// RemoveReplies removes "replies" edges to Reply entities.
func (cuo *CommentUpdateOne) RemoveReplies(r ...*Reply) *CommentUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cuo.RemoveReplyIDs(ids...)
}

// ClearNotifications clears all "notifications" edges to the Notification entity.
func (cuo *CommentUpdateOne) ClearNotifications() *CommentUpdateOne {
	cuo.mutation.ClearNotifications()
	return cuo
}

// RemoveNotificationIDs removes the "notifications" edge to Notification entities by IDs.
func (cuo *CommentUpdateOne) RemoveNotificationIDs(ids ...uuid.UUID) *CommentUpdateOne {
	cuo.mutation.RemoveNotificationIDs(ids...)
	return cuo
}

// RemoveNotifications removes "notifications" edges to Notification entities.
func (cuo *CommentUpdateOne) RemoveNotifications(n ...*Notification) *CommentUpdateOne {
	ids := make([]uuid.UUID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return cuo.RemoveNotificationIDs(ids...)
}

// Where appends a list predicates to the CommentUpdate builder.
func (cuo *CommentUpdateOne) Where(ps ...predicate.Comment) *CommentUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CommentUpdateOne) Select(field string, fields ...string) *CommentUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Comment entity.
func (cuo *CommentUpdateOne) Save(ctx context.Context) (*Comment, error) {
	cuo.defaults()
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CommentUpdateOne) SaveX(ctx context.Context) *Comment {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CommentUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CommentUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CommentUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		v := comment.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CommentUpdateOne) check() error {
	if v, ok := cuo.mutation.Text(); ok {
		if err := comment.TextValidator(v); err != nil {
			return &ValidationError{Name: "text", err: fmt.Errorf(`ent: validator failed for field "Comment.text": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Slug(); ok {
		if err := comment.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`ent: validator failed for field "Comment.slug": %w`, err)}
		}
	}
	if _, ok := cuo.mutation.AuthorID(); cuo.mutation.AuthorCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Comment.author"`)
	}
	if _, ok := cuo.mutation.PostID(); cuo.mutation.PostCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Comment.post"`)
	}
	return nil
}

func (cuo *CommentUpdateOne) sqlSave(ctx context.Context) (_node *Comment, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(comment.Table, comment.Columns, sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUUID))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Comment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, comment.FieldID)
		for _, f := range fields {
			if !comment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != comment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.CreatedAt(); ok {
		_spec.SetField(comment.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(comment.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.Text(); ok {
		_spec.SetField(comment.FieldText, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Slug(); ok {
		_spec.SetField(comment.FieldSlug, field.TypeString, value)
	}
	if cuo.mutation.ReactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comment.ReactionsTable,
			Columns: []string{comment.ReactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reaction.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedReactionsIDs(); len(nodes) > 0 && !cuo.mutation.ReactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comment.ReactionsTable,
			Columns: []string{comment.ReactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reaction.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ReactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comment.ReactionsTable,
			Columns: []string{comment.ReactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reaction.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.AuthorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comment.AuthorTable,
			Columns: []string{comment.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comment.AuthorTable,
			Columns: []string{comment.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.PostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comment.PostTable,
			Columns: []string{comment.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.PostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comment.PostTable,
			Columns: []string{comment.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.RepliesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comment.RepliesTable,
			Columns: []string{comment.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reply.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedRepliesIDs(); len(nodes) > 0 && !cuo.mutation.RepliesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comment.RepliesTable,
			Columns: []string{comment.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reply.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RepliesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comment.RepliesTable,
			Columns: []string{comment.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reply.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comment.NotificationsTable,
			Columns: []string{comment.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedNotificationsIDs(); len(nodes) > 0 && !cuo.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comment.NotificationsTable,
			Columns: []string{comment.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.NotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comment.NotificationsTable,
			Columns: []string{comment.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Comment{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{comment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
