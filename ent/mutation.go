// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/kayprogrammer/socialnet-v4/ent/predicate"
	"github.com/kayprogrammer/socialnet-v4/ent/sitedetail"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeSiteDetail = "SiteDetail"
)

// SiteDetailMutation represents an operation that mutates the SiteDetail nodes in the graph.
type SiteDetailMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	created_at    *time.Time
	updated_at    *time.Time
	name          *string
	email         *string
	phone         *string
	address       *string
	fb            *string
	tw            *string
	wh            *string
	ig            *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*SiteDetail, error)
	predicates    []predicate.SiteDetail
}

var _ ent.Mutation = (*SiteDetailMutation)(nil)

// sitedetailOption allows management of the mutation configuration using functional options.
type sitedetailOption func(*SiteDetailMutation)

// newSiteDetailMutation creates new mutation for the SiteDetail entity.
func newSiteDetailMutation(c config, op Op, opts ...sitedetailOption) *SiteDetailMutation {
	m := &SiteDetailMutation{
		config:        c,
		op:            op,
		typ:           TypeSiteDetail,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSiteDetailID sets the ID field of the mutation.
func withSiteDetailID(id uuid.UUID) sitedetailOption {
	return func(m *SiteDetailMutation) {
		var (
			err   error
			once  sync.Once
			value *SiteDetail
		)
		m.oldValue = func(ctx context.Context) (*SiteDetail, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SiteDetail.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSiteDetail sets the old SiteDetail of the mutation.
func withSiteDetail(node *SiteDetail) sitedetailOption {
	return func(m *SiteDetailMutation) {
		m.oldValue = func(context.Context) (*SiteDetail, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SiteDetailMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SiteDetailMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of SiteDetail entities.
func (m *SiteDetailMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SiteDetailMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SiteDetailMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SiteDetail.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *SiteDetailMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SiteDetailMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the SiteDetail entity.
// If the SiteDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SiteDetailMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SiteDetailMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *SiteDetailMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *SiteDetailMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the SiteDetail entity.
// If the SiteDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SiteDetailMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *SiteDetailMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetName sets the "name" field.
func (m *SiteDetailMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *SiteDetailMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the SiteDetail entity.
// If the SiteDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SiteDetailMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *SiteDetailMutation) ResetName() {
	m.name = nil
}

// SetEmail sets the "email" field.
func (m *SiteDetailMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *SiteDetailMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the SiteDetail entity.
// If the SiteDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SiteDetailMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *SiteDetailMutation) ResetEmail() {
	m.email = nil
}

// SetPhone sets the "phone" field.
func (m *SiteDetailMutation) SetPhone(s string) {
	m.phone = &s
}

// Phone returns the value of the "phone" field in the mutation.
func (m *SiteDetailMutation) Phone() (r string, exists bool) {
	v := m.phone
	if v == nil {
		return
	}
	return *v, true
}

// OldPhone returns the old "phone" field's value of the SiteDetail entity.
// If the SiteDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SiteDetailMutation) OldPhone(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhone: %w", err)
	}
	return oldValue.Phone, nil
}

// ResetPhone resets all changes to the "phone" field.
func (m *SiteDetailMutation) ResetPhone() {
	m.phone = nil
}

// SetAddress sets the "address" field.
func (m *SiteDetailMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the value of the "address" field in the mutation.
func (m *SiteDetailMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old "address" field's value of the SiteDetail entity.
// If the SiteDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SiteDetailMutation) OldAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ResetAddress resets all changes to the "address" field.
func (m *SiteDetailMutation) ResetAddress() {
	m.address = nil
}

// SetFb sets the "fb" field.
func (m *SiteDetailMutation) SetFb(s string) {
	m.fb = &s
}

// Fb returns the value of the "fb" field in the mutation.
func (m *SiteDetailMutation) Fb() (r string, exists bool) {
	v := m.fb
	if v == nil {
		return
	}
	return *v, true
}

// OldFb returns the old "fb" field's value of the SiteDetail entity.
// If the SiteDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SiteDetailMutation) OldFb(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFb is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFb requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFb: %w", err)
	}
	return oldValue.Fb, nil
}

// ResetFb resets all changes to the "fb" field.
func (m *SiteDetailMutation) ResetFb() {
	m.fb = nil
}

// SetTw sets the "tw" field.
func (m *SiteDetailMutation) SetTw(s string) {
	m.tw = &s
}

// Tw returns the value of the "tw" field in the mutation.
func (m *SiteDetailMutation) Tw() (r string, exists bool) {
	v := m.tw
	if v == nil {
		return
	}
	return *v, true
}

// OldTw returns the old "tw" field's value of the SiteDetail entity.
// If the SiteDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SiteDetailMutation) OldTw(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTw is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTw requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTw: %w", err)
	}
	return oldValue.Tw, nil
}

// ResetTw resets all changes to the "tw" field.
func (m *SiteDetailMutation) ResetTw() {
	m.tw = nil
}

// SetWh sets the "wh" field.
func (m *SiteDetailMutation) SetWh(s string) {
	m.wh = &s
}

// Wh returns the value of the "wh" field in the mutation.
func (m *SiteDetailMutation) Wh() (r string, exists bool) {
	v := m.wh
	if v == nil {
		return
	}
	return *v, true
}

// OldWh returns the old "wh" field's value of the SiteDetail entity.
// If the SiteDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SiteDetailMutation) OldWh(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWh is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWh requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWh: %w", err)
	}
	return oldValue.Wh, nil
}

// ResetWh resets all changes to the "wh" field.
func (m *SiteDetailMutation) ResetWh() {
	m.wh = nil
}

// SetIg sets the "ig" field.
func (m *SiteDetailMutation) SetIg(s string) {
	m.ig = &s
}

// Ig returns the value of the "ig" field in the mutation.
func (m *SiteDetailMutation) Ig() (r string, exists bool) {
	v := m.ig
	if v == nil {
		return
	}
	return *v, true
}

// OldIg returns the old "ig" field's value of the SiteDetail entity.
// If the SiteDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SiteDetailMutation) OldIg(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIg is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIg requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIg: %w", err)
	}
	return oldValue.Ig, nil
}

// ResetIg resets all changes to the "ig" field.
func (m *SiteDetailMutation) ResetIg() {
	m.ig = nil
}

// Where appends a list predicates to the SiteDetailMutation builder.
func (m *SiteDetailMutation) Where(ps ...predicate.SiteDetail) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SiteDetailMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SiteDetailMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.SiteDetail, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SiteDetailMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SiteDetailMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (SiteDetail).
func (m *SiteDetailMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SiteDetailMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.created_at != nil {
		fields = append(fields, sitedetail.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, sitedetail.FieldUpdatedAt)
	}
	if m.name != nil {
		fields = append(fields, sitedetail.FieldName)
	}
	if m.email != nil {
		fields = append(fields, sitedetail.FieldEmail)
	}
	if m.phone != nil {
		fields = append(fields, sitedetail.FieldPhone)
	}
	if m.address != nil {
		fields = append(fields, sitedetail.FieldAddress)
	}
	if m.fb != nil {
		fields = append(fields, sitedetail.FieldFb)
	}
	if m.tw != nil {
		fields = append(fields, sitedetail.FieldTw)
	}
	if m.wh != nil {
		fields = append(fields, sitedetail.FieldWh)
	}
	if m.ig != nil {
		fields = append(fields, sitedetail.FieldIg)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SiteDetailMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case sitedetail.FieldCreatedAt:
		return m.CreatedAt()
	case sitedetail.FieldUpdatedAt:
		return m.UpdatedAt()
	case sitedetail.FieldName:
		return m.Name()
	case sitedetail.FieldEmail:
		return m.Email()
	case sitedetail.FieldPhone:
		return m.Phone()
	case sitedetail.FieldAddress:
		return m.Address()
	case sitedetail.FieldFb:
		return m.Fb()
	case sitedetail.FieldTw:
		return m.Tw()
	case sitedetail.FieldWh:
		return m.Wh()
	case sitedetail.FieldIg:
		return m.Ig()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SiteDetailMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case sitedetail.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case sitedetail.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case sitedetail.FieldName:
		return m.OldName(ctx)
	case sitedetail.FieldEmail:
		return m.OldEmail(ctx)
	case sitedetail.FieldPhone:
		return m.OldPhone(ctx)
	case sitedetail.FieldAddress:
		return m.OldAddress(ctx)
	case sitedetail.FieldFb:
		return m.OldFb(ctx)
	case sitedetail.FieldTw:
		return m.OldTw(ctx)
	case sitedetail.FieldWh:
		return m.OldWh(ctx)
	case sitedetail.FieldIg:
		return m.OldIg(ctx)
	}
	return nil, fmt.Errorf("unknown SiteDetail field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SiteDetailMutation) SetField(name string, value ent.Value) error {
	switch name {
	case sitedetail.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case sitedetail.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case sitedetail.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case sitedetail.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case sitedetail.FieldPhone:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhone(v)
		return nil
	case sitedetail.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	case sitedetail.FieldFb:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFb(v)
		return nil
	case sitedetail.FieldTw:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTw(v)
		return nil
	case sitedetail.FieldWh:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWh(v)
		return nil
	case sitedetail.FieldIg:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIg(v)
		return nil
	}
	return fmt.Errorf("unknown SiteDetail field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SiteDetailMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SiteDetailMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SiteDetailMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown SiteDetail numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SiteDetailMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SiteDetailMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SiteDetailMutation) ClearField(name string) error {
	return fmt.Errorf("unknown SiteDetail nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SiteDetailMutation) ResetField(name string) error {
	switch name {
	case sitedetail.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case sitedetail.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case sitedetail.FieldName:
		m.ResetName()
		return nil
	case sitedetail.FieldEmail:
		m.ResetEmail()
		return nil
	case sitedetail.FieldPhone:
		m.ResetPhone()
		return nil
	case sitedetail.FieldAddress:
		m.ResetAddress()
		return nil
	case sitedetail.FieldFb:
		m.ResetFb()
		return nil
	case sitedetail.FieldTw:
		m.ResetTw()
		return nil
	case sitedetail.FieldWh:
		m.ResetWh()
		return nil
	case sitedetail.FieldIg:
		m.ResetIg()
		return nil
	}
	return fmt.Errorf("unknown SiteDetail field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SiteDetailMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SiteDetailMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SiteDetailMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SiteDetailMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SiteDetailMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SiteDetailMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SiteDetailMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown SiteDetail unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SiteDetailMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown SiteDetail edge %s", name)
}
