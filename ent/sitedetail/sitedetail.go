// Code generated by ent, DO NOT EDIT.

package sitedetail

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the sitedetail type in the database.
	Label = "site_detail"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldPhone holds the string denoting the phone field in the database.
	FieldPhone = "phone"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldFb holds the string denoting the fb field in the database.
	FieldFb = "fb"
	// FieldTw holds the string denoting the tw field in the database.
	FieldTw = "tw"
	// FieldWh holds the string denoting the wh field in the database.
	FieldWh = "wh"
	// FieldIg holds the string denoting the ig field in the database.
	FieldIg = "ig"
	// Table holds the table name of the sitedetail in the database.
	Table = "site_details"
)

// Columns holds all SQL columns for sitedetail fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldName,
	FieldEmail,
	FieldPhone,
	FieldAddress,
	FieldFb,
	FieldTw,
	FieldWh,
	FieldIg,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultName holds the default value on creation for the "name" field.
	DefaultName string
	// DefaultEmail holds the default value on creation for the "email" field.
	DefaultEmail string
	// DefaultPhone holds the default value on creation for the "phone" field.
	DefaultPhone string
	// DefaultAddress holds the default value on creation for the "address" field.
	DefaultAddress string
	// DefaultFb holds the default value on creation for the "fb" field.
	DefaultFb string
	// DefaultTw holds the default value on creation for the "tw" field.
	DefaultTw string
	// DefaultWh holds the default value on creation for the "wh" field.
	DefaultWh string
	// DefaultIg holds the default value on creation for the "ig" field.
	DefaultIg string
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the SiteDetail queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByPhone orders the results by the phone field.
func ByPhone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhone, opts...).ToFunc()
}

// ByAddress orders the results by the address field.
func ByAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddress, opts...).ToFunc()
}

// ByFb orders the results by the fb field.
func ByFb(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFb, opts...).ToFunc()
}

// ByTw orders the results by the tw field.
func ByTw(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTw, opts...).ToFunc()
}

// ByWh orders the results by the wh field.
func ByWh(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWh, opts...).ToFunc()
}

// ByIg orders the results by the ig field.
func ByIg(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIg, opts...).ToFunc()
}
