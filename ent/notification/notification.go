// Code generated by ent, DO NOT EDIT.

package notification

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the notification type in the database.
	Label = "notification"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldSenderID holds the string denoting the sender_id field in the database.
	FieldSenderID = "sender_id"
	// FieldNtype holds the string denoting the ntype field in the database.
	FieldNtype = "ntype"
	// FieldPostID holds the string denoting the post_id field in the database.
	FieldPostID = "post_id"
	// FieldCommentID holds the string denoting the comment_id field in the database.
	FieldCommentID = "comment_id"
	// FieldReplyID holds the string denoting the reply_id field in the database.
	FieldReplyID = "reply_id"
	// FieldText holds the string denoting the text field in the database.
	FieldText = "text"
	// EdgeSender holds the string denoting the sender edge name in mutations.
	EdgeSender = "sender"
	// EdgeReceivers holds the string denoting the receivers edge name in mutations.
	EdgeReceivers = "receivers"
	// EdgePost holds the string denoting the post edge name in mutations.
	EdgePost = "post"
	// EdgeComment holds the string denoting the comment edge name in mutations.
	EdgeComment = "comment"
	// EdgeReply holds the string denoting the reply edge name in mutations.
	EdgeReply = "reply"
	// EdgeReadBy holds the string denoting the read_by edge name in mutations.
	EdgeReadBy = "read_by"
	// Table holds the table name of the notification in the database.
	Table = "notifications"
	// SenderTable is the table that holds the sender relation/edge.
	SenderTable = "notifications"
	// SenderInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	SenderInverseTable = "users"
	// SenderColumn is the table column denoting the sender relation/edge.
	SenderColumn = "sender_id"
	// ReceiversTable is the table that holds the receivers relation/edge. The primary key declared below.
	ReceiversTable = "user_notifications"
	// ReceiversInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	ReceiversInverseTable = "users"
	// PostTable is the table that holds the post relation/edge.
	PostTable = "notifications"
	// PostInverseTable is the table name for the Post entity.
	// It exists in this package in order to avoid circular dependency with the "post" package.
	PostInverseTable = "posts"
	// PostColumn is the table column denoting the post relation/edge.
	PostColumn = "post_id"
	// CommentTable is the table that holds the comment relation/edge.
	CommentTable = "notifications"
	// CommentInverseTable is the table name for the Comment entity.
	// It exists in this package in order to avoid circular dependency with the "comment" package.
	CommentInverseTable = "comments"
	// CommentColumn is the table column denoting the comment relation/edge.
	CommentColumn = "comment_id"
	// ReplyTable is the table that holds the reply relation/edge.
	ReplyTable = "notifications"
	// ReplyInverseTable is the table name for the Reply entity.
	// It exists in this package in order to avoid circular dependency with the "reply" package.
	ReplyInverseTable = "replies"
	// ReplyColumn is the table column denoting the reply relation/edge.
	ReplyColumn = "reply_id"
	// ReadByTable is the table that holds the read_by relation/edge. The primary key declared below.
	ReadByTable = "user_notifications_read"
	// ReadByInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	ReadByInverseTable = "users"
)

// Columns holds all SQL columns for notification fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldSenderID,
	FieldNtype,
	FieldPostID,
	FieldCommentID,
	FieldReplyID,
	FieldText,
}

var (
	// ReceiversPrimaryKey and ReceiversColumn2 are the table columns denoting the
	// primary key for the receivers relation (M2M).
	ReceiversPrimaryKey = []string{"user_id", "notification_id"}
	// ReadByPrimaryKey and ReadByColumn2 are the table columns denoting the
	// primary key for the read_by relation (M2M).
	ReadByPrimaryKey = []string{"user_id", "notification_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Ntype defines the type for the "ntype" enum field.
type Ntype string

// Ntype values.
const (
	NtypeREACTION Ntype = "REACTION"
	NtypeCOMMENT  Ntype = "COMMENT"
	NtypeREPLY    Ntype = "REPLY"
	NtypeADMIN    Ntype = "ADMIN"
)

func (n Ntype) String() string {
	return string(n)
}

// NtypeValidator is a validator for the "ntype" field enum values. It is called by the builders before save.
func NtypeValidator(n Ntype) error {
	switch n {
	case NtypeREACTION, NtypeCOMMENT, NtypeREPLY, NtypeADMIN:
		return nil
	default:
		return fmt.Errorf("notification: invalid enum value for ntype field: %q", n)
	}
}

// OrderOption defines the ordering options for the Notification queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// BySenderID orders the results by the sender_id field.
func BySenderID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSenderID, opts...).ToFunc()
}

// ByNtype orders the results by the ntype field.
func ByNtype(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNtype, opts...).ToFunc()
}

// ByPostID orders the results by the post_id field.
func ByPostID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPostID, opts...).ToFunc()
}

// ByCommentID orders the results by the comment_id field.
func ByCommentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCommentID, opts...).ToFunc()
}

// ByReplyID orders the results by the reply_id field.
func ByReplyID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReplyID, opts...).ToFunc()
}

// ByText orders the results by the text field.
func ByText(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldText, opts...).ToFunc()
}

// BySenderField orders the results by sender field.
func BySenderField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSenderStep(), sql.OrderByField(field, opts...))
	}
}

// ByReceiversCount orders the results by receivers count.
func ByReceiversCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newReceiversStep(), opts...)
	}
}

// ByReceivers orders the results by receivers terms.
func ByReceivers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReceiversStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPostField orders the results by post field.
func ByPostField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPostStep(), sql.OrderByField(field, opts...))
	}
}

// ByCommentField orders the results by comment field.
func ByCommentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCommentStep(), sql.OrderByField(field, opts...))
	}
}

// ByReplyField orders the results by reply field.
func ByReplyField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReplyStep(), sql.OrderByField(field, opts...))
	}
}

// ByReadByCount orders the results by read_by count.
func ByReadByCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newReadByStep(), opts...)
	}
}

// ByReadBy orders the results by read_by terms.
func ByReadBy(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReadByStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newSenderStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SenderInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, SenderTable, SenderColumn),
	)
}
func newReceiversStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReceiversInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, ReceiversTable, ReceiversPrimaryKey...),
	)
}
func newPostStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PostInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PostTable, PostColumn),
	)
}
func newCommentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CommentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CommentTable, CommentColumn),
	)
}
func newReplyStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReplyInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ReplyTable, ReplyColumn),
	)
}
func newReadByStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReadByInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, ReadByTable, ReadByPrimaryKey...),
	)
}
