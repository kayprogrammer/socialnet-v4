// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/kayprogrammer/socialnet-v4/ent/comment"
	"github.com/kayprogrammer/socialnet-v4/ent/notification"
	"github.com/kayprogrammer/socialnet-v4/ent/post"
	"github.com/kayprogrammer/socialnet-v4/ent/reply"
	"github.com/kayprogrammer/socialnet-v4/ent/user"
)

// Notification is the model entity for the Notification schema.
type Notification struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// SenderID holds the value of the "sender_id" field.
	SenderID *uuid.UUID `json:"sender_id,omitempty"`
	// Ntype holds the value of the "ntype" field.
	Ntype notification.Ntype `json:"ntype,omitempty"`
	// PostID holds the value of the "post_id" field.
	PostID *uuid.UUID `json:"post_id,omitempty"`
	// CommentID holds the value of the "comment_id" field.
	CommentID *uuid.UUID `json:"comment_id,omitempty"`
	// ReplyID holds the value of the "reply_id" field.
	ReplyID *uuid.UUID `json:"reply_id,omitempty"`
	// Text holds the value of the "text" field.
	Text *string `json:"text,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the NotificationQuery when eager-loading is set.
	Edges        NotificationEdges `json:"edges"`
	selectValues sql.SelectValues
}

// NotificationEdges holds the relations/edges for other nodes in the graph.
type NotificationEdges struct {
	// Sender holds the value of the sender edge.
	Sender *User `json:"sender,omitempty"`
	// Receivers holds the value of the receivers edge.
	Receivers []*User `json:"receivers,omitempty"`
	// Post holds the value of the post edge.
	Post *Post `json:"post,omitempty"`
	// Comment holds the value of the comment edge.
	Comment *Comment `json:"comment,omitempty"`
	// Reply holds the value of the reply edge.
	Reply *Reply `json:"reply,omitempty"`
	// ReadBy holds the value of the read_by edge.
	ReadBy []*User `json:"read_by,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
}

// SenderOrErr returns the Sender value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NotificationEdges) SenderOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Sender == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Sender, nil
	}
	return nil, &NotLoadedError{edge: "sender"}
}

// ReceiversOrErr returns the Receivers value or an error if the edge
// was not loaded in eager-loading.
func (e NotificationEdges) ReceiversOrErr() ([]*User, error) {
	if e.loadedTypes[1] {
		return e.Receivers, nil
	}
	return nil, &NotLoadedError{edge: "receivers"}
}

// PostOrErr returns the Post value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NotificationEdges) PostOrErr() (*Post, error) {
	if e.loadedTypes[2] {
		if e.Post == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: post.Label}
		}
		return e.Post, nil
	}
	return nil, &NotLoadedError{edge: "post"}
}

// CommentOrErr returns the Comment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NotificationEdges) CommentOrErr() (*Comment, error) {
	if e.loadedTypes[3] {
		if e.Comment == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: comment.Label}
		}
		return e.Comment, nil
	}
	return nil, &NotLoadedError{edge: "comment"}
}

// ReplyOrErr returns the Reply value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NotificationEdges) ReplyOrErr() (*Reply, error) {
	if e.loadedTypes[4] {
		if e.Reply == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: reply.Label}
		}
		return e.Reply, nil
	}
	return nil, &NotLoadedError{edge: "reply"}
}

// ReadByOrErr returns the ReadBy value or an error if the edge
// was not loaded in eager-loading.
func (e NotificationEdges) ReadByOrErr() ([]*User, error) {
	if e.loadedTypes[5] {
		return e.ReadBy, nil
	}
	return nil, &NotLoadedError{edge: "read_by"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Notification) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case notification.FieldSenderID, notification.FieldPostID, notification.FieldCommentID, notification.FieldReplyID:
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case notification.FieldNtype, notification.FieldText:
			values[i] = new(sql.NullString)
		case notification.FieldCreatedAt, notification.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case notification.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Notification fields.
func (n *Notification) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case notification.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				n.ID = *value
			}
		case notification.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				n.CreatedAt = value.Time
			}
		case notification.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				n.UpdatedAt = value.Time
			}
		case notification.FieldSenderID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field sender_id", values[i])
			} else if value.Valid {
				n.SenderID = new(uuid.UUID)
				*n.SenderID = *value.S.(*uuid.UUID)
			}
		case notification.FieldNtype:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ntype", values[i])
			} else if value.Valid {
				n.Ntype = notification.Ntype(value.String)
			}
		case notification.FieldPostID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field post_id", values[i])
			} else if value.Valid {
				n.PostID = new(uuid.UUID)
				*n.PostID = *value.S.(*uuid.UUID)
			}
		case notification.FieldCommentID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field comment_id", values[i])
			} else if value.Valid {
				n.CommentID = new(uuid.UUID)
				*n.CommentID = *value.S.(*uuid.UUID)
			}
		case notification.FieldReplyID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field reply_id", values[i])
			} else if value.Valid {
				n.ReplyID = new(uuid.UUID)
				*n.ReplyID = *value.S.(*uuid.UUID)
			}
		case notification.FieldText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field text", values[i])
			} else if value.Valid {
				n.Text = new(string)
				*n.Text = value.String
			}
		default:
			n.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Notification.
// This includes values selected through modifiers, order, etc.
func (n *Notification) Value(name string) (ent.Value, error) {
	return n.selectValues.Get(name)
}

// QuerySender queries the "sender" edge of the Notification entity.
func (n *Notification) QuerySender() *UserQuery {
	return NewNotificationClient(n.config).QuerySender(n)
}

// QueryReceivers queries the "receivers" edge of the Notification entity.
func (n *Notification) QueryReceivers() *UserQuery {
	return NewNotificationClient(n.config).QueryReceivers(n)
}

// QueryPost queries the "post" edge of the Notification entity.
func (n *Notification) QueryPost() *PostQuery {
	return NewNotificationClient(n.config).QueryPost(n)
}

// QueryComment queries the "comment" edge of the Notification entity.
func (n *Notification) QueryComment() *CommentQuery {
	return NewNotificationClient(n.config).QueryComment(n)
}

// QueryReply queries the "reply" edge of the Notification entity.
func (n *Notification) QueryReply() *ReplyQuery {
	return NewNotificationClient(n.config).QueryReply(n)
}

// QueryReadBy queries the "read_by" edge of the Notification entity.
func (n *Notification) QueryReadBy() *UserQuery {
	return NewNotificationClient(n.config).QueryReadBy(n)
}

// Update returns a builder for updating this Notification.
// Note that you need to call Notification.Unwrap() before calling this method if this Notification
// was returned from a transaction, and the transaction was committed or rolled back.
func (n *Notification) Update() *NotificationUpdateOne {
	return NewNotificationClient(n.config).UpdateOne(n)
}

// Unwrap unwraps the Notification entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (n *Notification) Unwrap() *Notification {
	_tx, ok := n.config.driver.(*txDriver)
	if !ok {
		panic("ent: Notification is not a transactional entity")
	}
	n.config.driver = _tx.drv
	return n
}

// String implements the fmt.Stringer.
func (n *Notification) String() string {
	var builder strings.Builder
	builder.WriteString("Notification(")
	builder.WriteString(fmt.Sprintf("id=%v, ", n.ID))
	builder.WriteString("created_at=")
	builder.WriteString(n.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(n.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := n.SenderID; v != nil {
		builder.WriteString("sender_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("ntype=")
	builder.WriteString(fmt.Sprintf("%v", n.Ntype))
	builder.WriteString(", ")
	if v := n.PostID; v != nil {
		builder.WriteString("post_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := n.CommentID; v != nil {
		builder.WriteString("comment_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := n.ReplyID; v != nil {
		builder.WriteString("reply_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := n.Text; v != nil {
		builder.WriteString("text=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// Notifications is a parsable slice of Notification.
type Notifications []*Notification
