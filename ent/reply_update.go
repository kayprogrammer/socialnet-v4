// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/kayprogrammer/socialnet-v4/ent/comment"
	"github.com/kayprogrammer/socialnet-v4/ent/notification"
	"github.com/kayprogrammer/socialnet-v4/ent/predicate"
	"github.com/kayprogrammer/socialnet-v4/ent/reaction"
	"github.com/kayprogrammer/socialnet-v4/ent/reply"
	"github.com/kayprogrammer/socialnet-v4/ent/user"
)

// ReplyUpdate is the builder for updating Reply entities.
type ReplyUpdate struct {
	config
	hooks    []Hook
	mutation *ReplyMutation
}

// Where appends a list predicates to the ReplyUpdate builder.
func (ru *ReplyUpdate) Where(ps ...predicate.Reply) *ReplyUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetCreatedAt sets the "created_at" field.
func (ru *ReplyUpdate) SetCreatedAt(t time.Time) *ReplyUpdate {
	ru.mutation.SetCreatedAt(t)
	return ru
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ru *ReplyUpdate) SetNillableCreatedAt(t *time.Time) *ReplyUpdate {
	if t != nil {
		ru.SetCreatedAt(*t)
	}
	return ru
}

// SetUpdatedAt sets the "updated_at" field.
func (ru *ReplyUpdate) SetUpdatedAt(t time.Time) *ReplyUpdate {
	ru.mutation.SetUpdatedAt(t)
	return ru
}

// SetText sets the "text" field.
func (ru *ReplyUpdate) SetText(s string) *ReplyUpdate {
	ru.mutation.SetText(s)
	return ru
}

// SetNillableText sets the "text" field if the given value is not nil.
func (ru *ReplyUpdate) SetNillableText(s *string) *ReplyUpdate {
	if s != nil {
		ru.SetText(*s)
	}
	return ru
}

// SetSlug sets the "slug" field.
func (ru *ReplyUpdate) SetSlug(s string) *ReplyUpdate {
	ru.mutation.SetSlug(s)
	return ru
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (ru *ReplyUpdate) SetNillableSlug(s *string) *ReplyUpdate {
	if s != nil {
		ru.SetSlug(*s)
	}
	return ru
}

// SetAuthorID sets the "author_id" field.
func (ru *ReplyUpdate) SetAuthorID(u uuid.UUID) *ReplyUpdate {
	ru.mutation.SetAuthorID(u)
	return ru
}

// SetNillableAuthorID sets the "author_id" field if the given value is not nil.
func (ru *ReplyUpdate) SetNillableAuthorID(u *uuid.UUID) *ReplyUpdate {
	if u != nil {
		ru.SetAuthorID(*u)
	}
	return ru
}

// SetCommentID sets the "comment_id" field.
func (ru *ReplyUpdate) SetCommentID(u uuid.UUID) *ReplyUpdate {
	ru.mutation.SetCommentID(u)
	return ru
}

// SetNillableCommentID sets the "comment_id" field if the given value is not nil.
func (ru *ReplyUpdate) SetNillableCommentID(u *uuid.UUID) *ReplyUpdate {
	if u != nil {
		ru.SetCommentID(*u)
	}
	return ru
}

// AddReactionIDs adds the "reactions" edge to the Reaction entity by IDs.
func (ru *ReplyUpdate) AddReactionIDs(ids ...uuid.UUID) *ReplyUpdate {
	ru.mutation.AddReactionIDs(ids...)
	return ru
}

// AddReactions adds the "reactions" edges to the Reaction entity.
func (ru *ReplyUpdate) AddReactions(r ...*Reaction) *ReplyUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.AddReactionIDs(ids...)
}

// SetAuthor sets the "author" edge to the User entity.
func (ru *ReplyUpdate) SetAuthor(u *User) *ReplyUpdate {
	return ru.SetAuthorID(u.ID)
}

// SetComment sets the "comment" edge to the Comment entity.
func (ru *ReplyUpdate) SetComment(c *Comment) *ReplyUpdate {
	return ru.SetCommentID(c.ID)
}

// AddNotificationIDs adds the "notifications" edge to the Notification entity by IDs.
func (ru *ReplyUpdate) AddNotificationIDs(ids ...uuid.UUID) *ReplyUpdate {
	ru.mutation.AddNotificationIDs(ids...)
	return ru
}

// AddNotifications adds the "notifications" edges to the Notification entity.
func (ru *ReplyUpdate) AddNotifications(n ...*Notification) *ReplyUpdate {
	ids := make([]uuid.UUID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return ru.AddNotificationIDs(ids...)
}

// Mutation returns the ReplyMutation object of the builder.
func (ru *ReplyUpdate) Mutation() *ReplyMutation {
	return ru.mutation
}

// ClearReactions clears all "reactions" edges to the Reaction entity.
func (ru *ReplyUpdate) ClearReactions() *ReplyUpdate {
	ru.mutation.ClearReactions()
	return ru
}

// RemoveReactionIDs removes the "reactions" edge to Reaction entities by IDs.
func (ru *ReplyUpdate) RemoveReactionIDs(ids ...uuid.UUID) *ReplyUpdate {
	ru.mutation.RemoveReactionIDs(ids...)
	return ru
}

// RemoveReactions removes "reactions" edges to Reaction entities.
func (ru *ReplyUpdate) RemoveReactions(r ...*Reaction) *ReplyUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.RemoveReactionIDs(ids...)
}

// ClearAuthor clears the "author" edge to the User entity.
func (ru *ReplyUpdate) ClearAuthor() *ReplyUpdate {
	ru.mutation.ClearAuthor()
	return ru
}

// ClearComment clears the "comment" edge to the Comment entity.
func (ru *ReplyUpdate) ClearComment() *ReplyUpdate {
	ru.mutation.ClearComment()
	return ru
}

// ClearNotifications clears all "notifications" edges to the Notification entity.
func (ru *ReplyUpdate) ClearNotifications() *ReplyUpdate {
	ru.mutation.ClearNotifications()
	return ru
}

// RemoveNotificationIDs removes the "notifications" edge to Notification entities by IDs.
func (ru *ReplyUpdate) RemoveNotificationIDs(ids ...uuid.UUID) *ReplyUpdate {
	ru.mutation.RemoveNotificationIDs(ids...)
	return ru
}

// RemoveNotifications removes "notifications" edges to Notification entities.
func (ru *ReplyUpdate) RemoveNotifications(n ...*Notification) *ReplyUpdate {
	ids := make([]uuid.UUID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return ru.RemoveNotificationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *ReplyUpdate) Save(ctx context.Context) (int, error) {
	ru.defaults()
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *ReplyUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *ReplyUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *ReplyUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ru *ReplyUpdate) defaults() {
	if _, ok := ru.mutation.UpdatedAt(); !ok {
		v := reply.UpdateDefaultUpdatedAt()
		ru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *ReplyUpdate) check() error {
	if v, ok := ru.mutation.Text(); ok {
		if err := reply.TextValidator(v); err != nil {
			return &ValidationError{Name: "text", err: fmt.Errorf(`ent: validator failed for field "Reply.text": %w`, err)}
		}
	}
	if v, ok := ru.mutation.Slug(); ok {
		if err := reply.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`ent: validator failed for field "Reply.slug": %w`, err)}
		}
	}
	if _, ok := ru.mutation.AuthorID(); ru.mutation.AuthorCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Reply.author"`)
	}
	if _, ok := ru.mutation.CommentID(); ru.mutation.CommentCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Reply.comment"`)
	}
	return nil
}

func (ru *ReplyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(reply.Table, reply.Columns, sqlgraph.NewFieldSpec(reply.FieldID, field.TypeUUID))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.CreatedAt(); ok {
		_spec.SetField(reply.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ru.mutation.UpdatedAt(); ok {
		_spec.SetField(reply.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ru.mutation.Text(); ok {
		_spec.SetField(reply.FieldText, field.TypeString, value)
	}
	if value, ok := ru.mutation.Slug(); ok {
		_spec.SetField(reply.FieldSlug, field.TypeString, value)
	}
	if ru.mutation.ReactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   reply.ReactionsTable,
			Columns: []string{reply.ReactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reaction.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedReactionsIDs(); len(nodes) > 0 && !ru.mutation.ReactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   reply.ReactionsTable,
			Columns: []string{reply.ReactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reaction.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.ReactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   reply.ReactionsTable,
			Columns: []string{reply.ReactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reaction.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.AuthorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reply.AuthorTable,
			Columns: []string{reply.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reply.AuthorTable,
			Columns: []string{reply.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.CommentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reply.CommentTable,
			Columns: []string{reply.CommentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.CommentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reply.CommentTable,
			Columns: []string{reply.CommentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   reply.NotificationsTable,
			Columns: []string{reply.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedNotificationsIDs(); len(nodes) > 0 && !ru.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   reply.NotificationsTable,
			Columns: []string{reply.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.NotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   reply.NotificationsTable,
			Columns: []string{reply.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reply.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// ReplyUpdateOne is the builder for updating a single Reply entity.
type ReplyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ReplyMutation
}

// SetCreatedAt sets the "created_at" field.
func (ruo *ReplyUpdateOne) SetCreatedAt(t time.Time) *ReplyUpdateOne {
	ruo.mutation.SetCreatedAt(t)
	return ruo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ruo *ReplyUpdateOne) SetNillableCreatedAt(t *time.Time) *ReplyUpdateOne {
	if t != nil {
		ruo.SetCreatedAt(*t)
	}
	return ruo
}

// SetUpdatedAt sets the "updated_at" field.
func (ruo *ReplyUpdateOne) SetUpdatedAt(t time.Time) *ReplyUpdateOne {
	ruo.mutation.SetUpdatedAt(t)
	return ruo
}

// SetText sets the "text" field.
func (ruo *ReplyUpdateOne) SetText(s string) *ReplyUpdateOne {
	ruo.mutation.SetText(s)
	return ruo
}

// SetNillableText sets the "text" field if the given value is not nil.
func (ruo *ReplyUpdateOne) SetNillableText(s *string) *ReplyUpdateOne {
	if s != nil {
		ruo.SetText(*s)
	}
	return ruo
}

// SetSlug sets the "slug" field.
func (ruo *ReplyUpdateOne) SetSlug(s string) *ReplyUpdateOne {
	ruo.mutation.SetSlug(s)
	return ruo
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (ruo *ReplyUpdateOne) SetNillableSlug(s *string) *ReplyUpdateOne {
	if s != nil {
		ruo.SetSlug(*s)
	}
	return ruo
}

// SetAuthorID sets the "author_id" field.
func (ruo *ReplyUpdateOne) SetAuthorID(u uuid.UUID) *ReplyUpdateOne {
	ruo.mutation.SetAuthorID(u)
	return ruo
}

// SetNillableAuthorID sets the "author_id" field if the given value is not nil.
func (ruo *ReplyUpdateOne) SetNillableAuthorID(u *uuid.UUID) *ReplyUpdateOne {
	if u != nil {
		ruo.SetAuthorID(*u)
	}
	return ruo
}

// SetCommentID sets the "comment_id" field.
func (ruo *ReplyUpdateOne) SetCommentID(u uuid.UUID) *ReplyUpdateOne {
	ruo.mutation.SetCommentID(u)
	return ruo
}

// SetNillableCommentID sets the "comment_id" field if the given value is not nil.
func (ruo *ReplyUpdateOne) SetNillableCommentID(u *uuid.UUID) *ReplyUpdateOne {
	if u != nil {
		ruo.SetCommentID(*u)
	}
	return ruo
}

// AddReactionIDs adds the "reactions" edge to the Reaction entity by IDs.
func (ruo *ReplyUpdateOne) AddReactionIDs(ids ...uuid.UUID) *ReplyUpdateOne {
	ruo.mutation.AddReactionIDs(ids...)
	return ruo
}

// AddReactions adds the "reactions" edges to the Reaction entity.
func (ruo *ReplyUpdateOne) AddReactions(r ...*Reaction) *ReplyUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.AddReactionIDs(ids...)
}

// SetAuthor sets the "author" edge to the User entity.
func (ruo *ReplyUpdateOne) SetAuthor(u *User) *ReplyUpdateOne {
	return ruo.SetAuthorID(u.ID)
}

// SetComment sets the "comment" edge to the Comment entity.
func (ruo *ReplyUpdateOne) SetComment(c *Comment) *ReplyUpdateOne {
	return ruo.SetCommentID(c.ID)
}

// AddNotificationIDs adds the "notifications" edge to the Notification entity by IDs.
func (ruo *ReplyUpdateOne) AddNotificationIDs(ids ...uuid.UUID) *ReplyUpdateOne {
	ruo.mutation.AddNotificationIDs(ids...)
	return ruo
}

// AddNotifications adds the "notifications" edges to the Notification entity.
func (ruo *ReplyUpdateOne) AddNotifications(n ...*Notification) *ReplyUpdateOne {
	ids := make([]uuid.UUID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return ruo.AddNotificationIDs(ids...)
}

// Mutation returns the ReplyMutation object of the builder.
func (ruo *ReplyUpdateOne) Mutation() *ReplyMutation {
	return ruo.mutation
}

// ClearReactions clears all "reactions" edges to the Reaction entity.
func (ruo *ReplyUpdateOne) ClearReactions() *ReplyUpdateOne {
	ruo.mutation.ClearReactions()
	return ruo
}

// RemoveReactionIDs removes the "reactions" edge to Reaction entities by IDs.
func (ruo *ReplyUpdateOne) RemoveReactionIDs(ids ...uuid.UUID) *ReplyUpdateOne {
	ruo.mutation.RemoveReactionIDs(ids...)
	return ruo
}

// RemoveReactions removes "reactions" edges to Reaction entities.
func (ruo *ReplyUpdateOne) RemoveReactions(r ...*Reaction) *ReplyUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.RemoveReactionIDs(ids...)
}

// ClearAuthor clears the "author" edge to the User entity.
func (ruo *ReplyUpdateOne) ClearAuthor() *ReplyUpdateOne {
	ruo.mutation.ClearAuthor()
	return ruo
}

// ClearComment clears the "comment" edge to the Comment entity.
func (ruo *ReplyUpdateOne) ClearComment() *ReplyUpdateOne {
	ruo.mutation.ClearComment()
	return ruo
}

// ClearNotifications clears all "notifications" edges to the Notification entity.
func (ruo *ReplyUpdateOne) ClearNotifications() *ReplyUpdateOne {
	ruo.mutation.ClearNotifications()
	return ruo
}

// RemoveNotificationIDs removes the "notifications" edge to Notification entities by IDs.
func (ruo *ReplyUpdateOne) RemoveNotificationIDs(ids ...uuid.UUID) *ReplyUpdateOne {
	ruo.mutation.RemoveNotificationIDs(ids...)
	return ruo
}

// RemoveNotifications removes "notifications" edges to Notification entities.
func (ruo *ReplyUpdateOne) RemoveNotifications(n ...*Notification) *ReplyUpdateOne {
	ids := make([]uuid.UUID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return ruo.RemoveNotificationIDs(ids...)
}

// Where appends a list predicates to the ReplyUpdate builder.
func (ruo *ReplyUpdateOne) Where(ps ...predicate.Reply) *ReplyUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *ReplyUpdateOne) Select(field string, fields ...string) *ReplyUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Reply entity.
func (ruo *ReplyUpdateOne) Save(ctx context.Context) (*Reply, error) {
	ruo.defaults()
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *ReplyUpdateOne) SaveX(ctx context.Context) *Reply {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *ReplyUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *ReplyUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruo *ReplyUpdateOne) defaults() {
	if _, ok := ruo.mutation.UpdatedAt(); !ok {
		v := reply.UpdateDefaultUpdatedAt()
		ruo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *ReplyUpdateOne) check() error {
	if v, ok := ruo.mutation.Text(); ok {
		if err := reply.TextValidator(v); err != nil {
			return &ValidationError{Name: "text", err: fmt.Errorf(`ent: validator failed for field "Reply.text": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.Slug(); ok {
		if err := reply.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`ent: validator failed for field "Reply.slug": %w`, err)}
		}
	}
	if _, ok := ruo.mutation.AuthorID(); ruo.mutation.AuthorCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Reply.author"`)
	}
	if _, ok := ruo.mutation.CommentID(); ruo.mutation.CommentCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Reply.comment"`)
	}
	return nil
}

func (ruo *ReplyUpdateOne) sqlSave(ctx context.Context) (_node *Reply, err error) {
	if err := ruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(reply.Table, reply.Columns, sqlgraph.NewFieldSpec(reply.FieldID, field.TypeUUID))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Reply.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, reply.FieldID)
		for _, f := range fields {
			if !reply.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != reply.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.CreatedAt(); ok {
		_spec.SetField(reply.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.UpdatedAt(); ok {
		_spec.SetField(reply.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.Text(); ok {
		_spec.SetField(reply.FieldText, field.TypeString, value)
	}
	if value, ok := ruo.mutation.Slug(); ok {
		_spec.SetField(reply.FieldSlug, field.TypeString, value)
	}
	if ruo.mutation.ReactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   reply.ReactionsTable,
			Columns: []string{reply.ReactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reaction.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedReactionsIDs(); len(nodes) > 0 && !ruo.mutation.ReactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   reply.ReactionsTable,
			Columns: []string{reply.ReactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reaction.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.ReactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   reply.ReactionsTable,
			Columns: []string{reply.ReactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reaction.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.AuthorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reply.AuthorTable,
			Columns: []string{reply.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reply.AuthorTable,
			Columns: []string{reply.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.CommentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reply.CommentTable,
			Columns: []string{reply.CommentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.CommentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reply.CommentTable,
			Columns: []string{reply.CommentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   reply.NotificationsTable,
			Columns: []string{reply.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedNotificationsIDs(); len(nodes) > 0 && !ruo.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   reply.NotificationsTable,
			Columns: []string{reply.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.NotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   reply.NotificationsTable,
			Columns: []string{reply.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Reply{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reply.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
