// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kayprogrammer/socialnet-v4/ent/predicate"
	"github.com/kayprogrammer/socialnet-v4/ent/sitedetail"
)

// SiteDetailUpdate is the builder for updating SiteDetail entities.
type SiteDetailUpdate struct {
	config
	hooks    []Hook
	mutation *SiteDetailMutation
}

// Where appends a list predicates to the SiteDetailUpdate builder.
func (sdu *SiteDetailUpdate) Where(ps ...predicate.SiteDetail) *SiteDetailUpdate {
	sdu.mutation.Where(ps...)
	return sdu
}

// SetCreatedAt sets the "created_at" field.
func (sdu *SiteDetailUpdate) SetCreatedAt(t time.Time) *SiteDetailUpdate {
	sdu.mutation.SetCreatedAt(t)
	return sdu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sdu *SiteDetailUpdate) SetNillableCreatedAt(t *time.Time) *SiteDetailUpdate {
	if t != nil {
		sdu.SetCreatedAt(*t)
	}
	return sdu
}

// SetUpdatedAt sets the "updated_at" field.
func (sdu *SiteDetailUpdate) SetUpdatedAt(t time.Time) *SiteDetailUpdate {
	sdu.mutation.SetUpdatedAt(t)
	return sdu
}

// SetName sets the "name" field.
func (sdu *SiteDetailUpdate) SetName(s string) *SiteDetailUpdate {
	sdu.mutation.SetName(s)
	return sdu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (sdu *SiteDetailUpdate) SetNillableName(s *string) *SiteDetailUpdate {
	if s != nil {
		sdu.SetName(*s)
	}
	return sdu
}

// SetEmail sets the "email" field.
func (sdu *SiteDetailUpdate) SetEmail(s string) *SiteDetailUpdate {
	sdu.mutation.SetEmail(s)
	return sdu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (sdu *SiteDetailUpdate) SetNillableEmail(s *string) *SiteDetailUpdate {
	if s != nil {
		sdu.SetEmail(*s)
	}
	return sdu
}

// SetPhone sets the "phone" field.
func (sdu *SiteDetailUpdate) SetPhone(s string) *SiteDetailUpdate {
	sdu.mutation.SetPhone(s)
	return sdu
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (sdu *SiteDetailUpdate) SetNillablePhone(s *string) *SiteDetailUpdate {
	if s != nil {
		sdu.SetPhone(*s)
	}
	return sdu
}

// SetAddress sets the "address" field.
func (sdu *SiteDetailUpdate) SetAddress(s string) *SiteDetailUpdate {
	sdu.mutation.SetAddress(s)
	return sdu
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (sdu *SiteDetailUpdate) SetNillableAddress(s *string) *SiteDetailUpdate {
	if s != nil {
		sdu.SetAddress(*s)
	}
	return sdu
}

// SetFb sets the "fb" field.
func (sdu *SiteDetailUpdate) SetFb(s string) *SiteDetailUpdate {
	sdu.mutation.SetFb(s)
	return sdu
}

// SetNillableFb sets the "fb" field if the given value is not nil.
func (sdu *SiteDetailUpdate) SetNillableFb(s *string) *SiteDetailUpdate {
	if s != nil {
		sdu.SetFb(*s)
	}
	return sdu
}

// SetTw sets the "tw" field.
func (sdu *SiteDetailUpdate) SetTw(s string) *SiteDetailUpdate {
	sdu.mutation.SetTw(s)
	return sdu
}

// SetNillableTw sets the "tw" field if the given value is not nil.
func (sdu *SiteDetailUpdate) SetNillableTw(s *string) *SiteDetailUpdate {
	if s != nil {
		sdu.SetTw(*s)
	}
	return sdu
}

// SetWh sets the "wh" field.
func (sdu *SiteDetailUpdate) SetWh(s string) *SiteDetailUpdate {
	sdu.mutation.SetWh(s)
	return sdu
}

// SetNillableWh sets the "wh" field if the given value is not nil.
func (sdu *SiteDetailUpdate) SetNillableWh(s *string) *SiteDetailUpdate {
	if s != nil {
		sdu.SetWh(*s)
	}
	return sdu
}

// SetIg sets the "ig" field.
func (sdu *SiteDetailUpdate) SetIg(s string) *SiteDetailUpdate {
	sdu.mutation.SetIg(s)
	return sdu
}

// SetNillableIg sets the "ig" field if the given value is not nil.
func (sdu *SiteDetailUpdate) SetNillableIg(s *string) *SiteDetailUpdate {
	if s != nil {
		sdu.SetIg(*s)
	}
	return sdu
}

// Mutation returns the SiteDetailMutation object of the builder.
func (sdu *SiteDetailUpdate) Mutation() *SiteDetailMutation {
	return sdu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sdu *SiteDetailUpdate) Save(ctx context.Context) (int, error) {
	sdu.defaults()
	return withHooks(ctx, sdu.sqlSave, sdu.mutation, sdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sdu *SiteDetailUpdate) SaveX(ctx context.Context) int {
	affected, err := sdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sdu *SiteDetailUpdate) Exec(ctx context.Context) error {
	_, err := sdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sdu *SiteDetailUpdate) ExecX(ctx context.Context) {
	if err := sdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sdu *SiteDetailUpdate) defaults() {
	if _, ok := sdu.mutation.UpdatedAt(); !ok {
		v := sitedetail.UpdateDefaultUpdatedAt()
		sdu.mutation.SetUpdatedAt(v)
	}
}

func (sdu *SiteDetailUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(sitedetail.Table, sitedetail.Columns, sqlgraph.NewFieldSpec(sitedetail.FieldID, field.TypeUUID))
	if ps := sdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sdu.mutation.CreatedAt(); ok {
		_spec.SetField(sitedetail.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := sdu.mutation.UpdatedAt(); ok {
		_spec.SetField(sitedetail.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := sdu.mutation.Name(); ok {
		_spec.SetField(sitedetail.FieldName, field.TypeString, value)
	}
	if value, ok := sdu.mutation.Email(); ok {
		_spec.SetField(sitedetail.FieldEmail, field.TypeString, value)
	}
	if value, ok := sdu.mutation.Phone(); ok {
		_spec.SetField(sitedetail.FieldPhone, field.TypeString, value)
	}
	if value, ok := sdu.mutation.Address(); ok {
		_spec.SetField(sitedetail.FieldAddress, field.TypeString, value)
	}
	if value, ok := sdu.mutation.Fb(); ok {
		_spec.SetField(sitedetail.FieldFb, field.TypeString, value)
	}
	if value, ok := sdu.mutation.Tw(); ok {
		_spec.SetField(sitedetail.FieldTw, field.TypeString, value)
	}
	if value, ok := sdu.mutation.Wh(); ok {
		_spec.SetField(sitedetail.FieldWh, field.TypeString, value)
	}
	if value, ok := sdu.mutation.Ig(); ok {
		_spec.SetField(sitedetail.FieldIg, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sitedetail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sdu.mutation.done = true
	return n, nil
}

// SiteDetailUpdateOne is the builder for updating a single SiteDetail entity.
type SiteDetailUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SiteDetailMutation
}

// SetCreatedAt sets the "created_at" field.
func (sduo *SiteDetailUpdateOne) SetCreatedAt(t time.Time) *SiteDetailUpdateOne {
	sduo.mutation.SetCreatedAt(t)
	return sduo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sduo *SiteDetailUpdateOne) SetNillableCreatedAt(t *time.Time) *SiteDetailUpdateOne {
	if t != nil {
		sduo.SetCreatedAt(*t)
	}
	return sduo
}

// SetUpdatedAt sets the "updated_at" field.
func (sduo *SiteDetailUpdateOne) SetUpdatedAt(t time.Time) *SiteDetailUpdateOne {
	sduo.mutation.SetUpdatedAt(t)
	return sduo
}

// SetName sets the "name" field.
func (sduo *SiteDetailUpdateOne) SetName(s string) *SiteDetailUpdateOne {
	sduo.mutation.SetName(s)
	return sduo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (sduo *SiteDetailUpdateOne) SetNillableName(s *string) *SiteDetailUpdateOne {
	if s != nil {
		sduo.SetName(*s)
	}
	return sduo
}

// SetEmail sets the "email" field.
func (sduo *SiteDetailUpdateOne) SetEmail(s string) *SiteDetailUpdateOne {
	sduo.mutation.SetEmail(s)
	return sduo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (sduo *SiteDetailUpdateOne) SetNillableEmail(s *string) *SiteDetailUpdateOne {
	if s != nil {
		sduo.SetEmail(*s)
	}
	return sduo
}

// SetPhone sets the "phone" field.
func (sduo *SiteDetailUpdateOne) SetPhone(s string) *SiteDetailUpdateOne {
	sduo.mutation.SetPhone(s)
	return sduo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (sduo *SiteDetailUpdateOne) SetNillablePhone(s *string) *SiteDetailUpdateOne {
	if s != nil {
		sduo.SetPhone(*s)
	}
	return sduo
}

// SetAddress sets the "address" field.
func (sduo *SiteDetailUpdateOne) SetAddress(s string) *SiteDetailUpdateOne {
	sduo.mutation.SetAddress(s)
	return sduo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (sduo *SiteDetailUpdateOne) SetNillableAddress(s *string) *SiteDetailUpdateOne {
	if s != nil {
		sduo.SetAddress(*s)
	}
	return sduo
}

// SetFb sets the "fb" field.
func (sduo *SiteDetailUpdateOne) SetFb(s string) *SiteDetailUpdateOne {
	sduo.mutation.SetFb(s)
	return sduo
}

// SetNillableFb sets the "fb" field if the given value is not nil.
func (sduo *SiteDetailUpdateOne) SetNillableFb(s *string) *SiteDetailUpdateOne {
	if s != nil {
		sduo.SetFb(*s)
	}
	return sduo
}

// SetTw sets the "tw" field.
func (sduo *SiteDetailUpdateOne) SetTw(s string) *SiteDetailUpdateOne {
	sduo.mutation.SetTw(s)
	return sduo
}

// SetNillableTw sets the "tw" field if the given value is not nil.
func (sduo *SiteDetailUpdateOne) SetNillableTw(s *string) *SiteDetailUpdateOne {
	if s != nil {
		sduo.SetTw(*s)
	}
	return sduo
}

// SetWh sets the "wh" field.
func (sduo *SiteDetailUpdateOne) SetWh(s string) *SiteDetailUpdateOne {
	sduo.mutation.SetWh(s)
	return sduo
}

// SetNillableWh sets the "wh" field if the given value is not nil.
func (sduo *SiteDetailUpdateOne) SetNillableWh(s *string) *SiteDetailUpdateOne {
	if s != nil {
		sduo.SetWh(*s)
	}
	return sduo
}

// SetIg sets the "ig" field.
func (sduo *SiteDetailUpdateOne) SetIg(s string) *SiteDetailUpdateOne {
	sduo.mutation.SetIg(s)
	return sduo
}

// SetNillableIg sets the "ig" field if the given value is not nil.
func (sduo *SiteDetailUpdateOne) SetNillableIg(s *string) *SiteDetailUpdateOne {
	if s != nil {
		sduo.SetIg(*s)
	}
	return sduo
}

// Mutation returns the SiteDetailMutation object of the builder.
func (sduo *SiteDetailUpdateOne) Mutation() *SiteDetailMutation {
	return sduo.mutation
}

// Where appends a list predicates to the SiteDetailUpdate builder.
func (sduo *SiteDetailUpdateOne) Where(ps ...predicate.SiteDetail) *SiteDetailUpdateOne {
	sduo.mutation.Where(ps...)
	return sduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sduo *SiteDetailUpdateOne) Select(field string, fields ...string) *SiteDetailUpdateOne {
	sduo.fields = append([]string{field}, fields...)
	return sduo
}

// Save executes the query and returns the updated SiteDetail entity.
func (sduo *SiteDetailUpdateOne) Save(ctx context.Context) (*SiteDetail, error) {
	sduo.defaults()
	return withHooks(ctx, sduo.sqlSave, sduo.mutation, sduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sduo *SiteDetailUpdateOne) SaveX(ctx context.Context) *SiteDetail {
	node, err := sduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sduo *SiteDetailUpdateOne) Exec(ctx context.Context) error {
	_, err := sduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sduo *SiteDetailUpdateOne) ExecX(ctx context.Context) {
	if err := sduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sduo *SiteDetailUpdateOne) defaults() {
	if _, ok := sduo.mutation.UpdatedAt(); !ok {
		v := sitedetail.UpdateDefaultUpdatedAt()
		sduo.mutation.SetUpdatedAt(v)
	}
}

func (sduo *SiteDetailUpdateOne) sqlSave(ctx context.Context) (_node *SiteDetail, err error) {
	_spec := sqlgraph.NewUpdateSpec(sitedetail.Table, sitedetail.Columns, sqlgraph.NewFieldSpec(sitedetail.FieldID, field.TypeUUID))
	id, ok := sduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SiteDetail.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sitedetail.FieldID)
		for _, f := range fields {
			if !sitedetail.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sitedetail.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sduo.mutation.CreatedAt(); ok {
		_spec.SetField(sitedetail.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := sduo.mutation.UpdatedAt(); ok {
		_spec.SetField(sitedetail.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := sduo.mutation.Name(); ok {
		_spec.SetField(sitedetail.FieldName, field.TypeString, value)
	}
	if value, ok := sduo.mutation.Email(); ok {
		_spec.SetField(sitedetail.FieldEmail, field.TypeString, value)
	}
	if value, ok := sduo.mutation.Phone(); ok {
		_spec.SetField(sitedetail.FieldPhone, field.TypeString, value)
	}
	if value, ok := sduo.mutation.Address(); ok {
		_spec.SetField(sitedetail.FieldAddress, field.TypeString, value)
	}
	if value, ok := sduo.mutation.Fb(); ok {
		_spec.SetField(sitedetail.FieldFb, field.TypeString, value)
	}
	if value, ok := sduo.mutation.Tw(); ok {
		_spec.SetField(sitedetail.FieldTw, field.TypeString, value)
	}
	if value, ok := sduo.mutation.Wh(); ok {
		_spec.SetField(sitedetail.FieldWh, field.TypeString, value)
	}
	if value, ok := sduo.mutation.Ig(); ok {
		_spec.SetField(sitedetail.FieldIg, field.TypeString, value)
	}
	_node = &SiteDetail{config: sduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sitedetail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sduo.mutation.done = true
	return _node, nil
}
