// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/kayprogrammer/socialnet-v4/ent/city"
	"github.com/kayprogrammer/socialnet-v4/ent/country"
	"github.com/kayprogrammer/socialnet-v4/ent/predicate"
	"github.com/kayprogrammer/socialnet-v4/ent/region"
)

// RegionUpdate is the builder for updating Region entities.
type RegionUpdate struct {
	config
	hooks    []Hook
	mutation *RegionMutation
}

// Where appends a list predicates to the RegionUpdate builder.
func (ru *RegionUpdate) Where(ps ...predicate.Region) *RegionUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetCreatedAt sets the "created_at" field.
func (ru *RegionUpdate) SetCreatedAt(t time.Time) *RegionUpdate {
	ru.mutation.SetCreatedAt(t)
	return ru
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ru *RegionUpdate) SetNillableCreatedAt(t *time.Time) *RegionUpdate {
	if t != nil {
		ru.SetCreatedAt(*t)
	}
	return ru
}

// SetUpdatedAt sets the "updated_at" field.
func (ru *RegionUpdate) SetUpdatedAt(t time.Time) *RegionUpdate {
	ru.mutation.SetUpdatedAt(t)
	return ru
}

// SetName sets the "name" field.
func (ru *RegionUpdate) SetName(s string) *RegionUpdate {
	ru.mutation.SetName(s)
	return ru
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ru *RegionUpdate) SetNillableName(s *string) *RegionUpdate {
	if s != nil {
		ru.SetName(*s)
	}
	return ru
}

// SetCountryID sets the "country_id" field.
func (ru *RegionUpdate) SetCountryID(u uuid.UUID) *RegionUpdate {
	ru.mutation.SetCountryID(u)
	return ru
}

// SetNillableCountryID sets the "country_id" field if the given value is not nil.
func (ru *RegionUpdate) SetNillableCountryID(u *uuid.UUID) *RegionUpdate {
	if u != nil {
		ru.SetCountryID(*u)
	}
	return ru
}

// SetCountry sets the "country" edge to the Country entity.
func (ru *RegionUpdate) SetCountry(c *Country) *RegionUpdate {
	return ru.SetCountryID(c.ID)
}

// AddCityIDs adds the "cities" edge to the City entity by IDs.
func (ru *RegionUpdate) AddCityIDs(ids ...uuid.UUID) *RegionUpdate {
	ru.mutation.AddCityIDs(ids...)
	return ru
}

// AddCities adds the "cities" edges to the City entity.
func (ru *RegionUpdate) AddCities(c ...*City) *RegionUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ru.AddCityIDs(ids...)
}

// Mutation returns the RegionMutation object of the builder.
func (ru *RegionUpdate) Mutation() *RegionMutation {
	return ru.mutation
}

// ClearCountry clears the "country" edge to the Country entity.
func (ru *RegionUpdate) ClearCountry() *RegionUpdate {
	ru.mutation.ClearCountry()
	return ru
}

// ClearCities clears all "cities" edges to the City entity.
func (ru *RegionUpdate) ClearCities() *RegionUpdate {
	ru.mutation.ClearCities()
	return ru
}

// RemoveCityIDs removes the "cities" edge to City entities by IDs.
func (ru *RegionUpdate) RemoveCityIDs(ids ...uuid.UUID) *RegionUpdate {
	ru.mutation.RemoveCityIDs(ids...)
	return ru
}

// RemoveCities removes "cities" edges to City entities.
func (ru *RegionUpdate) RemoveCities(c ...*City) *RegionUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ru.RemoveCityIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RegionUpdate) Save(ctx context.Context) (int, error) {
	ru.defaults()
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RegionUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RegionUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RegionUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ru *RegionUpdate) defaults() {
	if _, ok := ru.mutation.UpdatedAt(); !ok {
		v := region.UpdateDefaultUpdatedAt()
		ru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *RegionUpdate) check() error {
	if v, ok := ru.mutation.Name(); ok {
		if err := region.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Region.name": %w`, err)}
		}
	}
	if _, ok := ru.mutation.CountryID(); ru.mutation.CountryCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Region.country"`)
	}
	return nil
}

func (ru *RegionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(region.Table, region.Columns, sqlgraph.NewFieldSpec(region.FieldID, field.TypeUUID))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.CreatedAt(); ok {
		_spec.SetField(region.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ru.mutation.UpdatedAt(); ok {
		_spec.SetField(region.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ru.mutation.Name(); ok {
		_spec.SetField(region.FieldName, field.TypeString, value)
	}
	if ru.mutation.CountryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   region.CountryTable,
			Columns: []string{region.CountryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.CountryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   region.CountryTable,
			Columns: []string{region.CountryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.CitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   region.CitiesTable,
			Columns: []string{region.CitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedCitiesIDs(); len(nodes) > 0 && !ru.mutation.CitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   region.CitiesTable,
			Columns: []string{region.CitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.CitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   region.CitiesTable,
			Columns: []string{region.CitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{region.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RegionUpdateOne is the builder for updating a single Region entity.
type RegionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RegionMutation
}

// SetCreatedAt sets the "created_at" field.
func (ruo *RegionUpdateOne) SetCreatedAt(t time.Time) *RegionUpdateOne {
	ruo.mutation.SetCreatedAt(t)
	return ruo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ruo *RegionUpdateOne) SetNillableCreatedAt(t *time.Time) *RegionUpdateOne {
	if t != nil {
		ruo.SetCreatedAt(*t)
	}
	return ruo
}

// SetUpdatedAt sets the "updated_at" field.
func (ruo *RegionUpdateOne) SetUpdatedAt(t time.Time) *RegionUpdateOne {
	ruo.mutation.SetUpdatedAt(t)
	return ruo
}

// SetName sets the "name" field.
func (ruo *RegionUpdateOne) SetName(s string) *RegionUpdateOne {
	ruo.mutation.SetName(s)
	return ruo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ruo *RegionUpdateOne) SetNillableName(s *string) *RegionUpdateOne {
	if s != nil {
		ruo.SetName(*s)
	}
	return ruo
}

// SetCountryID sets the "country_id" field.
func (ruo *RegionUpdateOne) SetCountryID(u uuid.UUID) *RegionUpdateOne {
	ruo.mutation.SetCountryID(u)
	return ruo
}

// SetNillableCountryID sets the "country_id" field if the given value is not nil.
func (ruo *RegionUpdateOne) SetNillableCountryID(u *uuid.UUID) *RegionUpdateOne {
	if u != nil {
		ruo.SetCountryID(*u)
	}
	return ruo
}

// SetCountry sets the "country" edge to the Country entity.
func (ruo *RegionUpdateOne) SetCountry(c *Country) *RegionUpdateOne {
	return ruo.SetCountryID(c.ID)
}

// AddCityIDs adds the "cities" edge to the City entity by IDs.
func (ruo *RegionUpdateOne) AddCityIDs(ids ...uuid.UUID) *RegionUpdateOne {
	ruo.mutation.AddCityIDs(ids...)
	return ruo
}

// AddCities adds the "cities" edges to the City entity.
func (ruo *RegionUpdateOne) AddCities(c ...*City) *RegionUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ruo.AddCityIDs(ids...)
}

// Mutation returns the RegionMutation object of the builder.
func (ruo *RegionUpdateOne) Mutation() *RegionMutation {
	return ruo.mutation
}

// ClearCountry clears the "country" edge to the Country entity.
func (ruo *RegionUpdateOne) ClearCountry() *RegionUpdateOne {
	ruo.mutation.ClearCountry()
	return ruo
}

// ClearCities clears all "cities" edges to the City entity.
func (ruo *RegionUpdateOne) ClearCities() *RegionUpdateOne {
	ruo.mutation.ClearCities()
	return ruo
}

// RemoveCityIDs removes the "cities" edge to City entities by IDs.
func (ruo *RegionUpdateOne) RemoveCityIDs(ids ...uuid.UUID) *RegionUpdateOne {
	ruo.mutation.RemoveCityIDs(ids...)
	return ruo
}

// RemoveCities removes "cities" edges to City entities.
func (ruo *RegionUpdateOne) RemoveCities(c ...*City) *RegionUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ruo.RemoveCityIDs(ids...)
}

// Where appends a list predicates to the RegionUpdate builder.
func (ruo *RegionUpdateOne) Where(ps ...predicate.Region) *RegionUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RegionUpdateOne) Select(field string, fields ...string) *RegionUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Region entity.
func (ruo *RegionUpdateOne) Save(ctx context.Context) (*Region, error) {
	ruo.defaults()
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RegionUpdateOne) SaveX(ctx context.Context) *Region {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RegionUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RegionUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruo *RegionUpdateOne) defaults() {
	if _, ok := ruo.mutation.UpdatedAt(); !ok {
		v := region.UpdateDefaultUpdatedAt()
		ruo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *RegionUpdateOne) check() error {
	if v, ok := ruo.mutation.Name(); ok {
		if err := region.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Region.name": %w`, err)}
		}
	}
	if _, ok := ruo.mutation.CountryID(); ruo.mutation.CountryCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Region.country"`)
	}
	return nil
}

func (ruo *RegionUpdateOne) sqlSave(ctx context.Context) (_node *Region, err error) {
	if err := ruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(region.Table, region.Columns, sqlgraph.NewFieldSpec(region.FieldID, field.TypeUUID))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Region.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, region.FieldID)
		for _, f := range fields {
			if !region.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != region.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.CreatedAt(); ok {
		_spec.SetField(region.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.UpdatedAt(); ok {
		_spec.SetField(region.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.Name(); ok {
		_spec.SetField(region.FieldName, field.TypeString, value)
	}
	if ruo.mutation.CountryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   region.CountryTable,
			Columns: []string{region.CountryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.CountryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   region.CountryTable,
			Columns: []string{region.CountryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.CitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   region.CitiesTable,
			Columns: []string{region.CitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedCitiesIDs(); len(nodes) > 0 && !ruo.mutation.CitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   region.CitiesTable,
			Columns: []string{region.CitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.CitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   region.CitiesTable,
			Columns: []string{region.CitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Region{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{region.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
