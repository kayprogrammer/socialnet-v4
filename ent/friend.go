// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/kayprogrammer/socialnet-v4/ent/friend"
	"github.com/kayprogrammer/socialnet-v4/ent/user"
)

// Friend is the model entity for the Friend schema.
type Friend struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// RequesterID holds the value of the "requester_id" field.
	RequesterID uuid.UUID `json:"requester_id,omitempty"`
	// RequesteeID holds the value of the "requestee_id" field.
	RequesteeID uuid.UUID `json:"requestee_id,omitempty"`
	// Status holds the value of the "status" field.
	Status friend.Status `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FriendQuery when eager-loading is set.
	Edges        FriendEdges `json:"edges"`
	selectValues sql.SelectValues
}

// FriendEdges holds the relations/edges for other nodes in the graph.
type FriendEdges struct {
	// Requester holds the value of the requester edge.
	Requester *User `json:"requester,omitempty"`
	// Requestee holds the value of the requestee edge.
	Requestee *User `json:"requestee,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// RequesterOrErr returns the Requester value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FriendEdges) RequesterOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Requester == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Requester, nil
	}
	return nil, &NotLoadedError{edge: "requester"}
}

// RequesteeOrErr returns the Requestee value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FriendEdges) RequesteeOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.Requestee == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Requestee, nil
	}
	return nil, &NotLoadedError{edge: "requestee"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Friend) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case friend.FieldStatus:
			values[i] = new(sql.NullString)
		case friend.FieldCreatedAt, friend.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case friend.FieldID, friend.FieldRequesterID, friend.FieldRequesteeID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Friend fields.
func (f *Friend) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case friend.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				f.ID = *value
			}
		case friend.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				f.CreatedAt = value.Time
			}
		case friend.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				f.UpdatedAt = value.Time
			}
		case friend.FieldRequesterID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field requester_id", values[i])
			} else if value != nil {
				f.RequesterID = *value
			}
		case friend.FieldRequesteeID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field requestee_id", values[i])
			} else if value != nil {
				f.RequesteeID = *value
			}
		case friend.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				f.Status = friend.Status(value.String)
			}
		default:
			f.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Friend.
// This includes values selected through modifiers, order, etc.
func (f *Friend) Value(name string) (ent.Value, error) {
	return f.selectValues.Get(name)
}

// QueryRequester queries the "requester" edge of the Friend entity.
func (f *Friend) QueryRequester() *UserQuery {
	return NewFriendClient(f.config).QueryRequester(f)
}

// QueryRequestee queries the "requestee" edge of the Friend entity.
func (f *Friend) QueryRequestee() *UserQuery {
	return NewFriendClient(f.config).QueryRequestee(f)
}

// Update returns a builder for updating this Friend.
// Note that you need to call Friend.Unwrap() before calling this method if this Friend
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *Friend) Update() *FriendUpdateOne {
	return NewFriendClient(f.config).UpdateOne(f)
}

// Unwrap unwraps the Friend entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (f *Friend) Unwrap() *Friend {
	_tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("ent: Friend is not a transactional entity")
	}
	f.config.driver = _tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *Friend) String() string {
	var builder strings.Builder
	builder.WriteString("Friend(")
	builder.WriteString(fmt.Sprintf("id=%v, ", f.ID))
	builder.WriteString("created_at=")
	builder.WriteString(f.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(f.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("requester_id=")
	builder.WriteString(fmt.Sprintf("%v", f.RequesterID))
	builder.WriteString(", ")
	builder.WriteString("requestee_id=")
	builder.WriteString(fmt.Sprintf("%v", f.RequesteeID))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", f.Status))
	builder.WriteByte(')')
	return builder.String()
}

// Friends is a parsable slice of Friend.
type Friends []*Friend
