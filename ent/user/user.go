// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldFirstName holds the string denoting the first_name field in the database.
	FieldFirstName = "first_name"
	// FieldLastName holds the string denoting the last_name field in the database.
	FieldLastName = "last_name"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldTermsAgreement holds the string denoting the terms_agreement field in the database.
	FieldTermsAgreement = "terms_agreement"
	// FieldIsEmailVerified holds the string denoting the is_email_verified field in the database.
	FieldIsEmailVerified = "is_email_verified"
	// FieldIsStaff holds the string denoting the is_staff field in the database.
	FieldIsStaff = "is_staff"
	// FieldIsActive holds the string denoting the is_active field in the database.
	FieldIsActive = "is_active"
	// FieldBio holds the string denoting the bio field in the database.
	FieldBio = "bio"
	// FieldDob holds the string denoting the dob field in the database.
	FieldDob = "dob"
	// FieldAccess holds the string denoting the access field in the database.
	FieldAccess = "access"
	// FieldRefresh holds the string denoting the refresh field in the database.
	FieldRefresh = "refresh"
	// FieldCityID holds the string denoting the city_id field in the database.
	FieldCityID = "city_id"
	// FieldAvatarID holds the string denoting the avatar_id field in the database.
	FieldAvatarID = "avatar_id"
	// EdgeCity holds the string denoting the city edge name in mutations.
	EdgeCity = "city"
	// EdgeAvatar holds the string denoting the avatar edge name in mutations.
	EdgeAvatar = "avatar"
	// EdgeOtp holds the string denoting the otp edge name in mutations.
	EdgeOtp = "otp"
	// EdgePosts holds the string denoting the posts edge name in mutations.
	EdgePosts = "posts"
	// EdgeReactions holds the string denoting the reactions edge name in mutations.
	EdgeReactions = "reactions"
	// EdgeComments holds the string denoting the comments edge name in mutations.
	EdgeComments = "comments"
	// EdgeReplies holds the string denoting the replies edge name in mutations.
	EdgeReplies = "replies"
	// Table holds the table name of the user in the database.
	Table = "users"
	// CityTable is the table that holds the city relation/edge.
	CityTable = "users"
	// CityInverseTable is the table name for the City entity.
	// It exists in this package in order to avoid circular dependency with the "city" package.
	CityInverseTable = "cities"
	// CityColumn is the table column denoting the city relation/edge.
	CityColumn = "city_id"
	// AvatarTable is the table that holds the avatar relation/edge.
	AvatarTable = "users"
	// AvatarInverseTable is the table name for the File entity.
	// It exists in this package in order to avoid circular dependency with the "file" package.
	AvatarInverseTable = "files"
	// AvatarColumn is the table column denoting the avatar relation/edge.
	AvatarColumn = "avatar_id"
	// OtpTable is the table that holds the otp relation/edge.
	OtpTable = "otps"
	// OtpInverseTable is the table name for the Otp entity.
	// It exists in this package in order to avoid circular dependency with the "otp" package.
	OtpInverseTable = "otps"
	// OtpColumn is the table column denoting the otp relation/edge.
	OtpColumn = "user_id"
	// PostsTable is the table that holds the posts relation/edge.
	PostsTable = "posts"
	// PostsInverseTable is the table name for the Post entity.
	// It exists in this package in order to avoid circular dependency with the "post" package.
	PostsInverseTable = "posts"
	// PostsColumn is the table column denoting the posts relation/edge.
	PostsColumn = "author_id"
	// ReactionsTable is the table that holds the reactions relation/edge.
	ReactionsTable = "reactions"
	// ReactionsInverseTable is the table name for the Reaction entity.
	// It exists in this package in order to avoid circular dependency with the "reaction" package.
	ReactionsInverseTable = "reactions"
	// ReactionsColumn is the table column denoting the reactions relation/edge.
	ReactionsColumn = "user_id"
	// CommentsTable is the table that holds the comments relation/edge.
	CommentsTable = "comments"
	// CommentsInverseTable is the table name for the Comment entity.
	// It exists in this package in order to avoid circular dependency with the "comment" package.
	CommentsInverseTable = "comments"
	// CommentsColumn is the table column denoting the comments relation/edge.
	CommentsColumn = "author_id"
	// RepliesTable is the table that holds the replies relation/edge.
	RepliesTable = "replies"
	// RepliesInverseTable is the table name for the Reply entity.
	// It exists in this package in order to avoid circular dependency with the "reply" package.
	RepliesInverseTable = "replies"
	// RepliesColumn is the table column denoting the replies relation/edge.
	RepliesColumn = "author_id"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldFirstName,
	FieldLastName,
	FieldUsername,
	FieldEmail,
	FieldPassword,
	FieldTermsAgreement,
	FieldIsEmailVerified,
	FieldIsStaff,
	FieldIsActive,
	FieldBio,
	FieldDob,
	FieldAccess,
	FieldRefresh,
	FieldCityID,
	FieldAvatarID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// FirstNameValidator is a validator for the "first_name" field. It is called by the builders before save.
	FirstNameValidator func(string) error
	// LastNameValidator is a validator for the "last_name" field. It is called by the builders before save.
	LastNameValidator func(string) error
	// UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	UsernameValidator func(string) error
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	PasswordValidator func(string) error
	// DefaultTermsAgreement holds the default value on creation for the "terms_agreement" field.
	DefaultTermsAgreement bool
	// DefaultIsEmailVerified holds the default value on creation for the "is_email_verified" field.
	DefaultIsEmailVerified bool
	// DefaultIsStaff holds the default value on creation for the "is_staff" field.
	DefaultIsStaff bool
	// DefaultIsActive holds the default value on creation for the "is_active" field.
	DefaultIsActive bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByFirstName orders the results by the first_name field.
func ByFirstName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFirstName, opts...).ToFunc()
}

// ByLastName orders the results by the last_name field.
func ByLastName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastName, opts...).ToFunc()
}

// ByUsername orders the results by the username field.
func ByUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsername, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByPassword orders the results by the password field.
func ByPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassword, opts...).ToFunc()
}

// ByTermsAgreement orders the results by the terms_agreement field.
func ByTermsAgreement(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTermsAgreement, opts...).ToFunc()
}

// ByIsEmailVerified orders the results by the is_email_verified field.
func ByIsEmailVerified(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsEmailVerified, opts...).ToFunc()
}

// ByIsStaff orders the results by the is_staff field.
func ByIsStaff(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsStaff, opts...).ToFunc()
}

// ByIsActive orders the results by the is_active field.
func ByIsActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsActive, opts...).ToFunc()
}

// ByBio orders the results by the bio field.
func ByBio(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBio, opts...).ToFunc()
}

// ByDob orders the results by the dob field.
func ByDob(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDob, opts...).ToFunc()
}

// ByAccess orders the results by the access field.
func ByAccess(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccess, opts...).ToFunc()
}

// ByRefresh orders the results by the refresh field.
func ByRefresh(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRefresh, opts...).ToFunc()
}

// ByCityID orders the results by the city_id field.
func ByCityID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCityID, opts...).ToFunc()
}

// ByAvatarID orders the results by the avatar_id field.
func ByAvatarID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAvatarID, opts...).ToFunc()
}

// ByCityField orders the results by city field.
func ByCityField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCityStep(), sql.OrderByField(field, opts...))
	}
}

// ByAvatarField orders the results by avatar field.
func ByAvatarField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAvatarStep(), sql.OrderByField(field, opts...))
	}
}

// ByOtpField orders the results by otp field.
func ByOtpField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOtpStep(), sql.OrderByField(field, opts...))
	}
}

// ByPostsCount orders the results by posts count.
func ByPostsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPostsStep(), opts...)
	}
}

// ByPosts orders the results by posts terms.
func ByPosts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPostsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByReactionsCount orders the results by reactions count.
func ByReactionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newReactionsStep(), opts...)
	}
}

// ByReactions orders the results by reactions terms.
func ByReactions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReactionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCommentsCount orders the results by comments count.
func ByCommentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCommentsStep(), opts...)
	}
}

// ByComments orders the results by comments terms.
func ByComments(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCommentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRepliesCount orders the results by replies count.
func ByRepliesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRepliesStep(), opts...)
	}
}

// ByReplies orders the results by replies terms.
func ByReplies(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRepliesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCityStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CityInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CityTable, CityColumn),
	)
}
func newAvatarStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AvatarInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, AvatarTable, AvatarColumn),
	)
}
func newOtpStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OtpInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, OtpTable, OtpColumn),
	)
}
func newPostsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PostsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PostsTable, PostsColumn),
	)
}
func newReactionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReactionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ReactionsTable, ReactionsColumn),
	)
}
func newCommentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CommentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CommentsTable, CommentsColumn),
	)
}
func newRepliesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RepliesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RepliesTable, RepliesColumn),
	)
}
