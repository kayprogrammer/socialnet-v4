// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/kayprogrammer/socialnet-v4/ent/comment"
	"github.com/kayprogrammer/socialnet-v4/ent/post"
	"github.com/kayprogrammer/socialnet-v4/ent/reaction"
	"github.com/kayprogrammer/socialnet-v4/ent/reply"
	"github.com/kayprogrammer/socialnet-v4/ent/user"
)

// ReactionCreate is the builder for creating a Reaction entity.
type ReactionCreate struct {
	config
	mutation *ReactionMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (rc *ReactionCreate) SetCreatedAt(t time.Time) *ReactionCreate {
	rc.mutation.SetCreatedAt(t)
	return rc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rc *ReactionCreate) SetNillableCreatedAt(t *time.Time) *ReactionCreate {
	if t != nil {
		rc.SetCreatedAt(*t)
	}
	return rc
}

// SetUpdatedAt sets the "updated_at" field.
func (rc *ReactionCreate) SetUpdatedAt(t time.Time) *ReactionCreate {
	rc.mutation.SetUpdatedAt(t)
	return rc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rc *ReactionCreate) SetNillableUpdatedAt(t *time.Time) *ReactionCreate {
	if t != nil {
		rc.SetUpdatedAt(*t)
	}
	return rc
}

// SetUserID sets the "user_id" field.
func (rc *ReactionCreate) SetUserID(u uuid.UUID) *ReactionCreate {
	rc.mutation.SetUserID(u)
	return rc
}

// SetRtype sets the "rtype" field.
func (rc *ReactionCreate) SetRtype(r reaction.Rtype) *ReactionCreate {
	rc.mutation.SetRtype(r)
	return rc
}

// SetNillableRtype sets the "rtype" field if the given value is not nil.
func (rc *ReactionCreate) SetNillableRtype(r *reaction.Rtype) *ReactionCreate {
	if r != nil {
		rc.SetRtype(*r)
	}
	return rc
}

// SetPostID sets the "post_id" field.
func (rc *ReactionCreate) SetPostID(u uuid.UUID) *ReactionCreate {
	rc.mutation.SetPostID(u)
	return rc
}

// SetNillablePostID sets the "post_id" field if the given value is not nil.
func (rc *ReactionCreate) SetNillablePostID(u *uuid.UUID) *ReactionCreate {
	if u != nil {
		rc.SetPostID(*u)
	}
	return rc
}

// SetCommentID sets the "comment_id" field.
func (rc *ReactionCreate) SetCommentID(u uuid.UUID) *ReactionCreate {
	rc.mutation.SetCommentID(u)
	return rc
}

// SetNillableCommentID sets the "comment_id" field if the given value is not nil.
func (rc *ReactionCreate) SetNillableCommentID(u *uuid.UUID) *ReactionCreate {
	if u != nil {
		rc.SetCommentID(*u)
	}
	return rc
}

// SetReplyID sets the "reply_id" field.
func (rc *ReactionCreate) SetReplyID(u uuid.UUID) *ReactionCreate {
	rc.mutation.SetReplyID(u)
	return rc
}

// SetNillableReplyID sets the "reply_id" field if the given value is not nil.
func (rc *ReactionCreate) SetNillableReplyID(u *uuid.UUID) *ReactionCreate {
	if u != nil {
		rc.SetReplyID(*u)
	}
	return rc
}

// SetID sets the "id" field.
func (rc *ReactionCreate) SetID(u uuid.UUID) *ReactionCreate {
	rc.mutation.SetID(u)
	return rc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (rc *ReactionCreate) SetNillableID(u *uuid.UUID) *ReactionCreate {
	if u != nil {
		rc.SetID(*u)
	}
	return rc
}

// SetUser sets the "user" edge to the User entity.
func (rc *ReactionCreate) SetUser(u *User) *ReactionCreate {
	return rc.SetUserID(u.ID)
}

// SetPost sets the "post" edge to the Post entity.
func (rc *ReactionCreate) SetPost(p *Post) *ReactionCreate {
	return rc.SetPostID(p.ID)
}

// SetComment sets the "comment" edge to the Comment entity.
func (rc *ReactionCreate) SetComment(c *Comment) *ReactionCreate {
	return rc.SetCommentID(c.ID)
}

// SetReply sets the "reply" edge to the Reply entity.
func (rc *ReactionCreate) SetReply(r *Reply) *ReactionCreate {
	return rc.SetReplyID(r.ID)
}

// Mutation returns the ReactionMutation object of the builder.
func (rc *ReactionCreate) Mutation() *ReactionMutation {
	return rc.mutation
}

// Save creates the Reaction in the database.
func (rc *ReactionCreate) Save(ctx context.Context) (*Reaction, error) {
	rc.defaults()
	return withHooks(ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *ReactionCreate) SaveX(ctx context.Context) *Reaction {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *ReactionCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *ReactionCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *ReactionCreate) defaults() {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		v := reaction.DefaultCreatedAt()
		rc.mutation.SetCreatedAt(v)
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		v := reaction.DefaultUpdatedAt()
		rc.mutation.SetUpdatedAt(v)
	}
	if _, ok := rc.mutation.Rtype(); !ok {
		v := reaction.DefaultRtype
		rc.mutation.SetRtype(v)
	}
	if _, ok := rc.mutation.ID(); !ok {
		v := reaction.DefaultID()
		rc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *ReactionCreate) check() error {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Reaction.created_at"`)}
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Reaction.updated_at"`)}
	}
	if _, ok := rc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Reaction.user_id"`)}
	}
	if _, ok := rc.mutation.Rtype(); !ok {
		return &ValidationError{Name: "rtype", err: errors.New(`ent: missing required field "Reaction.rtype"`)}
	}
	if v, ok := rc.mutation.Rtype(); ok {
		if err := reaction.RtypeValidator(v); err != nil {
			return &ValidationError{Name: "rtype", err: fmt.Errorf(`ent: validator failed for field "Reaction.rtype": %w`, err)}
		}
	}
	if _, ok := rc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "Reaction.user"`)}
	}
	return nil
}

func (rc *ReactionCreate) sqlSave(ctx context.Context) (*Reaction, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *ReactionCreate) createSpec() (*Reaction, *sqlgraph.CreateSpec) {
	var (
		_node = &Reaction{config: rc.config}
		_spec = sqlgraph.NewCreateSpec(reaction.Table, sqlgraph.NewFieldSpec(reaction.FieldID, field.TypeUUID))
	)
	if id, ok := rc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := rc.mutation.CreatedAt(); ok {
		_spec.SetField(reaction.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rc.mutation.UpdatedAt(); ok {
		_spec.SetField(reaction.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := rc.mutation.Rtype(); ok {
		_spec.SetField(reaction.FieldRtype, field.TypeEnum, value)
		_node.Rtype = value
	}
	if nodes := rc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reaction.UserTable,
			Columns: []string{reaction.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.PostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reaction.PostTable,
			Columns: []string{reaction.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PostID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.CommentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reaction.CommentTable,
			Columns: []string{reaction.CommentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CommentID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.ReplyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reaction.ReplyTable,
			Columns: []string{reaction.ReplyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reply.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ReplyID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ReactionCreateBulk is the builder for creating many Reaction entities in bulk.
type ReactionCreateBulk struct {
	config
	err      error
	builders []*ReactionCreate
}

// Save creates the Reaction entities in the database.
func (rcb *ReactionCreateBulk) Save(ctx context.Context) ([]*Reaction, error) {
	if rcb.err != nil {
		return nil, rcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Reaction, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ReactionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *ReactionCreateBulk) SaveX(ctx context.Context) []*Reaction {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *ReactionCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *ReactionCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}
