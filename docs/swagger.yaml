basePath: /api/v4
consumes:
- application/json
definitions:
  reaction.Rtype:
    enum:
    - LIKE
    - LIKE
    - LOVE
    - HAHA
    - WOW
    - SAD
    - ANGRY
    type: string
    x-enum-varnames:
    - DefaultRtype
    - RtypeLIKE
    - RtypeLOVE
    - RtypeHAHA
    - RtypeWOW
    - RtypeSAD
    - RtypeANGRY
  routes.HealthCheckSchema:
    properties:
      success:
        example: pong
        type: string
    type: object
  schemas.AcceptFriendRequestSchema:
    properties:
      accepted:
        example: true
        type: boolean
      username:
        example: john-doe
        type: string
    required:
    - username
    type: object
  schemas.ChatSchema:
    properties:
      created_at:
        example: "2024-01-14T19:00:02.613124+01:00"
        type: string
      ctype:
        example: DM
        type: string
      description:
        example: A nice group for tech enthusiasts
        type: string
      id:
        example: d10dde64-a242-4ed0-bd75-4c759644b3a6
        type: string
      image:
        example: https://img.url
        type: string
      latest_message:
        $ref: '#/definitions/schemas.LatestMessageSchema'
      name:
        example: Correct Group
        type: string
      owner:
        $ref: '#/definitions/schemas.UserDataSchema'
      updated_at:
        example: "2024-01-14T19:00:02.613124+01:00"
        type: string
    type: object
  schemas.ChatsResponseDataSchema:
    properties:
      chats:
        items:
          $ref: '#/definitions/schemas.ChatSchema'
        type: array
      current_page:
        example: 1
        type: integer
      last_page:
        example: 100
        type: integer
      per_page:
        example: 100
        type: integer
    type: object
  schemas.ChatsResponseSchema:
    properties:
      data:
        $ref: '#/definitions/schemas.ChatsResponseDataSchema'
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  schemas.CitiesResponseSchema:
    properties:
      data:
        items:
          $ref: '#/definitions/schemas.CitySchema'
        type: array
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  schemas.CitySchema:
    properties:
      country:
        example: Nigeria
        type: string
      id:
        example: d10dde64-a242-4ed0-bd75-4c759644b3a6
        type: string
      name:
        example: Lekki
        type: string
      region:
        example: Lagos
        type: string
    type: object
  schemas.CommentInputSchema:
    properties:
      text:
        example: Jesus is Lord
        type: string
    type: object
  schemas.CommentResponseSchema:
    properties:
      data:
        $ref: '#/definitions/schemas.CommentSchema'
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  schemas.CommentSchema:
    properties:
      author:
        $ref: '#/definitions/schemas.UserDataSchema'
      reactions_count:
        example: 200
        type: integer
      replies_count:
        example: 50
        type: integer
      slug:
        example: john-doe-d10dde64-a242-4ed0-bd75-4c759644b3a6
        type: string
      text:
        example: Jesus Is King
        type: string
    type: object
  schemas.CommentWithRepliesResponseDataSchema:
    properties:
      current_page:
        example: 1
        type: integer
      items:
        items:
          $ref: '#/definitions/schemas.ReplySchema'
        type: array
      last_page:
        example: 100
        type: integer
      per_page:
        example: 100
        type: integer
    type: object
  schemas.CommentWithRepliesResponseSchema:
    properties:
      data:
        $ref: '#/definitions/schemas.CommentWithRepliesSchema'
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  schemas.CommentWithRepliesSchema:
    properties:
      comment:
        $ref: '#/definitions/schemas.CommentSchema'
      replies:
        $ref: '#/definitions/schemas.CommentWithRepliesResponseDataSchema'
    type: object
  schemas.CommentsResponseDataSchema:
    properties:
      comments:
        items:
          $ref: '#/definitions/schemas.CommentSchema'
        type: array
      current_page:
        example: 1
        type: integer
      last_page:
        example: 100
        type: integer
      per_page:
        example: 100
        type: integer
    type: object
  schemas.CommentsResponseSchema:
    properties:
      data:
        $ref: '#/definitions/schemas.CommentsResponseDataSchema'
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  schemas.DeleteUserSchema:
    properties:
      password:
        example: password
        type: string
    required:
    - password
    type: object
  schemas.EmailRequestSchema:
    properties:
      email:
        example: johndoe@email.com
        minLength: 5
        type: string
    required:
    - email
    type: object
  schemas.LatestMessageSchema:
    properties:
      file:
        type: string
      sender:
        $ref: '#/definitions/schemas.UserDataSchema'
      text:
        type: string
    type: object
  schemas.LoginSchema:
    properties:
      email:
        example: johndoe@email.com
        type: string
      password:
        example: password
        type: string
    required:
    - email
    - password
    type: object
  schemas.MessageCreateResponseDataSchema:
    properties:
      chat_id:
        type: string
      created_at:
        example: "2024-01-14T19:00:02.613124+01:00"
        type: string
      file:
        example: https://img.url
        type: string
      file_upload_data:
        $ref: '#/definitions/utils.SignatureFormat'
      id:
        type: string
      sender:
        $ref: '#/definitions/schemas.UserDataSchema'
      text:
        example: Jesus is Lord
        type: string
      updated_at:
        example: "2024-01-14T19:00:02.613124+01:00"
        type: string
    type: object
  schemas.MessageCreateResponseSchema:
    properties:
      data:
        $ref: '#/definitions/schemas.MessageCreateResponseDataSchema'
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  schemas.MessageCreateSchema:
    properties:
      chat_id:
        example: d10dde64-a242-4ed0-bd75-4c759644b3a6
        type: string
      file_type:
        example: image/jpeg
        type: string
      text:
        example: I am not in danger skyler, I am the danger
        type: string
      username:
        example: john-doe
        type: string
    type: object
  schemas.NotificationSchema:
    properties:
      comment_slug:
        example: john-doe-d10dde64-a242-4ed0-bd75-4c759644b3a6
        type: string
      id:
        type: string
      is_read:
        example: true
        type: boolean
      message:
        example: John Doe reacted to your post
        type: string
      ntype:
        example: REACTION
        type: string
      post_slug:
        example: john-doe-d10dde64-a242-4ed0-bd75-4c759644b3a6
        type: string
      reply_slug:
        example: john-doe-d10dde64-a242-4ed0-bd75-4c759644b3a6
        type: string
      sender:
        $ref: '#/definitions/schemas.UserDataSchema'
    type: object
  schemas.NotificationsResponseDataSchema:
    properties:
      current_page:
        example: 1
        type: integer
      last_page:
        example: 100
        type: integer
      notifications:
        items:
          $ref: '#/definitions/schemas.NotificationSchema'
        type: array
      per_page:
        example: 100
        type: integer
    type: object
  schemas.NotificationsResponseSchema:
    properties:
      data:
        $ref: '#/definitions/schemas.NotificationsResponseDataSchema'
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  schemas.PostInputResponseDataSchema:
    properties:
      author:
        $ref: '#/definitions/schemas.UserDataSchema'
      comments_count:
        example: 35
        type: integer
      created_at:
        example: "2024-01-14T19:00:02.613124+01:00"
        type: string
      file_upload_data:
        $ref: '#/definitions/utils.SignatureFormat'
      image:
        example: https://img.url
        type: string
      reactions_count:
        example: 200
        type: integer
      slug:
        example: john-doe-d10dde64-a242-4ed0-bd75-4c759644b3a6
        type: string
      text:
        example: God Is Good
        type: string
      updated_at:
        example: "2024-01-14T19:00:02.613124+01:00"
        type: string
    type: object
  schemas.PostInputResponseSchema:
    properties:
      data:
        $ref: '#/definitions/schemas.PostInputResponseDataSchema'
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  schemas.PostInputSchema:
    properties:
      file_type:
        example: image/jpeg
        type: string
      text:
        example: God is good
        type: string
    required:
    - text
    type: object
  schemas.PostResponseSchema:
    properties:
      data:
        $ref: '#/definitions/schemas.PostSchema'
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  schemas.PostSchema:
    properties:
      author:
        $ref: '#/definitions/schemas.UserDataSchema'
      comments_count:
        example: 35
        type: integer
      created_at:
        example: "2024-01-14T19:00:02.613124+01:00"
        type: string
      image:
        example: https://img.url
        type: string
      reactions_count:
        example: 200
        type: integer
      slug:
        example: john-doe-d10dde64-a242-4ed0-bd75-4c759644b3a6
        type: string
      text:
        example: God Is Good
        type: string
      updated_at:
        example: "2024-01-14T19:00:02.613124+01:00"
        type: string
    type: object
  schemas.PostsResponseDataSchema:
    properties:
      current_page:
        example: 1
        type: integer
      last_page:
        example: 100
        type: integer
      per_page:
        example: 100
        type: integer
      posts:
        items:
          $ref: '#/definitions/schemas.PostSchema'
        type: array
    type: object
  schemas.PostsResponseSchema:
    properties:
      data:
        $ref: '#/definitions/schemas.PostsResponseDataSchema'
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  schemas.ProfileResponseSchema:
    properties:
      data:
        $ref: '#/definitions/schemas.ProfileSchema'
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  schemas.ProfileSchema:
    properties:
      avatar:
        example: https://img.com
        type: string
      bio:
        example: Software Engineer | Go Fiber Developer
        type: string
      city:
        example: Lekki
        type: string
      created_at:
        type: string
      dob:
        type: string
      email:
        example: johndoe@email.com
        type: string
      first_name:
        example: John
        type: string
      last_name:
        example: Doe
        type: string
      updated_at:
        type: string
      username:
        example: john-doe
        type: string
    type: object
  schemas.ProfileUpdateSchema:
    properties:
      bio:
        example: Software Engineer | Go Fiber Developer
        maxLength: 200
        type: string
      city_id:
        example: d10dde64-a242-4ed0-bd75-4c759644b3a6
        type: string
      dob:
        example: "2001-01-16T00:00:00.106416+01:00"
        type: string
      file_type:
        example: image/jpeg
        type: string
      first_name:
        example: John
        maxLength: 50
        minLength: 1
        type: string
      last_name:
        example: Doe
        maxLength: 50
        minLength: 1
        type: string
    type: object
  schemas.ProfilesResponseDataSchema:
    properties:
      current_page:
        example: 1
        type: integer
      last_page:
        example: 100
        type: integer
      per_page:
        example: 100
        type: integer
      users:
        items:
          $ref: '#/definitions/schemas.ProfileSchema'
        type: array
    type: object
  schemas.ProfilesResponseSchema:
    properties:
      data:
        $ref: '#/definitions/schemas.ProfilesResponseDataSchema'
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  schemas.ReactionInputSchema:
    properties:
      rtype:
        allOf:
        - $ref: '#/definitions/reaction.Rtype'
        example: LIKE
    required:
    - rtype
    type: object
  schemas.ReactionResponseSchema:
    properties:
      data:
        $ref: '#/definitions/schemas.ReactionSchema'
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  schemas.ReactionSchema:
    properties:
      id:
        example: d10dde64-a242-4ed0-bd75-4c759644b3a6
        type: string
      rtype:
        example: LIKE
        type: string
      user:
        $ref: '#/definitions/schemas.UserDataSchema'
    type: object
  schemas.ReactionsResponseDataSchema:
    properties:
      current_page:
        example: 1
        type: integer
      last_page:
        example: 100
        type: integer
      per_page:
        example: 100
        type: integer
      reactions:
        items:
          $ref: '#/definitions/schemas.ReactionSchema'
        type: array
    type: object
  schemas.ReactionsResponseSchema:
    properties:
      data:
        $ref: '#/definitions/schemas.ReactionsResponseDataSchema'
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  schemas.ReadNotificationSchema:
    properties:
      id:
        example: d10dde64-a242-4ed0-bd75-4c759644b3a6
        type: string
      mark_all_as_read:
        example: false
        type: boolean
    type: object
  schemas.RefreshTokenSchema:
    properties:
      refresh:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6InNpbXBsZWlkIiwiZXhwIjoxMjU3ODk0MzAwfQ.Ys_jP70xdxch32hFECfJQuvpvU5_IiTIN2pJJv68EqQ
        type: string
    required:
    - refresh
    type: object
  schemas.RegisterResponseSchema:
    properties:
      data:
        $ref: '#/definitions/schemas.EmailRequestSchema'
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  schemas.RegisterUser:
    properties:
      email:
        example: johndoe@email.com
        minLength: 5
        type: string
      first_name:
        example: John
        maxLength: 50
        type: string
      last_name:
        example: Doe
        maxLength: 50
        type: string
      password:
        example: strongpassword
        maxLength: 50
        minLength: 8
        type: string
      terms_agreement:
        type: boolean
    required:
    - email
    - first_name
    - last_name
    - password
    type: object
  schemas.ReplyResponseSchema:
    properties:
      data:
        $ref: '#/definitions/schemas.ReplySchema'
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  schemas.ReplySchema:
    properties:
      author:
        $ref: '#/definitions/schemas.UserDataSchema'
      reactions_count:
        example: 200
        type: integer
      slug:
        example: john-doe-d10dde64-a242-4ed0-bd75-4c759644b3a6
        type: string
      text:
        example: Jesus Is King
        type: string
    type: object
  schemas.ResponseSchema:
    properties:
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  schemas.SendFriendRequestSchema:
    properties:
      username:
        example: john-doe
        type: string
    required:
    - username
    type: object
  schemas.SetNewPasswordSchema:
    properties:
      email:
        example: johndoe@example.com
        minLength: 5
        type: string
      otp:
        example: 123456
        type: integer
      password:
        example: newstrongpassword
        maxLength: 50
        minLength: 8
        type: string
    required:
    - email
    - otp
    - password
    type: object
  schemas.SiteDetail:
    properties:
      address:
        example: 234, Lagos, Nigeria
        type: string
      email:
        example: johndoe@email.com
        type: string
      fb:
        example: https://facebook.com
        type: string
      ig:
        example: https://instagram.com
        type: string
      name:
        example: SocialNet
        type: string
      phone:
        example: "+2348133831036"
        type: string
      tw:
        example: https://twitter.com
        type: string
      wh:
        example: https://wa.me/2348133831036
        type: string
    type: object
  schemas.SiteDetailResponseSchema:
    properties:
      data:
        $ref: '#/definitions/schemas.SiteDetail'
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  schemas.UserDataSchema:
    properties:
      avatar:
        example: https://img.url
        type: string
      name:
        example: John Doe
        type: string
      username:
        example: john-doe
        type: string
    type: object
  schemas.VerifyEmailRequestSchema:
    properties:
      email:
        example: johndoe@example.com
        minLength: 5
        type: string
      otp:
        example: 123456
        type: integer
    required:
    - email
    - otp
    type: object
  utils.ErrorResponse:
    properties:
      code:
        type: string
      data:
        additionalProperties:
          type: string
        type: object
      message:
        type: string
      status:
        type: string
    type: object
  utils.SignatureFormat:
    properties:
      public_id:
        example: images/f47ac10b-58cc-4372-a567-0e02b2c3d479
        type: string
      signature:
        example: e1ba4683fbbf90b75ca22e9f8e545b18c6b24eae
        type: string
      timestamp:
        example: 1678828200
        type: integer
    type: object
info:
  contact: {}
  description: |
    ## A Realtime Social Networking API built with FIBER & GORM ORM.

    ### WEBSOCKETS:

    #### Notifications

    - URL: `wss://{host}/api/v4/ws/notifications`

    - Requires authorization, so pass in the Bearer Authorization header.

    - You can only read and not send notification messages into this socket.


    #### Chats

    - URL: `wss://{host}/api/v4/ws/chats/{id}`
    - Requires authorization, so pass in the Bearer Authorization header.
    - Use chat_id as the ID for an existing chat or username if it's the first message in a DM.
    - You cannot read realtime messages from a username that doesn't belong to the authorized user, but you can surely send messages.
    - Only send a message to the socket endpoint after the message has been created or updated, and files have been uploaded.
    - Fields when sending a message through the socket:

      ```json
      { "status": "CREATED", "id": "fe4e0235-80fc-4c94-b15e-3da63226f8ab" }
      ```
  title: SOCIALNET API
  version: "4.0"
paths:
  /auth/login:
    post:
      description: This endpoint generates new access and refresh tokens for authentication
      parameters:
      - description: User login
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/schemas.LoginSchema'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/schemas.ResponseSchema'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - GuestUserAuth: []
      summary: Login a user
      tags:
      - Auth
  /auth/logout:
    get:
      description: This endpoint logs a user out from our application
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.ResponseSchema'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Logout a user
      tags:
      - Auth
  /auth/refresh:
    post:
      description: This endpoint refresh tokens by generating new access and refresh
        tokens for a user
      parameters:
      - description: Refresh token
        in: body
        name: refresh
        required: true
        schema:
          $ref: '#/definitions/schemas.RefreshTokenSchema'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/schemas.ResponseSchema'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Refresh tokens
      tags:
      - Auth
  /auth/register:
    post:
      description: This endpoint registers new users into our application.
      parameters:
      - description: User object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/schemas.RegisterUser'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/schemas.RegisterResponseSchema'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Register a new user
      tags:
      - Auth
  /auth/resend-verification-email:
    post:
      description: This endpoint resends new otp to the user's email.
      parameters:
      - description: Email object
        in: body
        name: email
        required: true
        schema:
          $ref: '#/definitions/schemas.EmailRequestSchema'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.ResponseSchema'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Resend Verification Email
      tags:
      - Auth
  /auth/send-password-reset-otp:
    post:
      description: This endpoint sends new password reset otp to the user's email.
      parameters:
      - description: Email object
        in: body
        name: email
        required: true
        schema:
          $ref: '#/definitions/schemas.EmailRequestSchema'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.ResponseSchema'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Send Password Reset Otp
      tags:
      - Auth
  /auth/set-new-password:
    post:
      description: This endpoint verifies the password reset otp.
      parameters:
      - description: Password reset object
        in: body
        name: email
        required: true
        schema:
          $ref: '#/definitions/schemas.SetNewPasswordSchema'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.ResponseSchema'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Set New Password
      tags:
      - Auth
  /auth/verify-email:
    post:
      description: This endpoint verifies a user's email.
      parameters:
      - description: Verify Email object
        in: body
        name: verify_email
        required: true
        schema:
          $ref: '#/definitions/schemas.VerifyEmailRequestSchema'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.ResponseSchema'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Verify a user's email
      tags:
      - Auth
  /chats:
    get:
      description: '`This endpoint retrieves a paginated list of the current user
        chats`'
      parameters:
      - default: 1
        description: Current Page
        in: query
        name: page
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.ChatsResponseSchema'
      security:
      - BearerAuth: []
      summary: Retrieve User Chats
      tags:
      - Chat
    post:
      description: |-
        `This endpoint sends a message`
        `You must either send a text or a file or both.`
        `If there's no chat_id, then its a new chat and you must set username and leave chat_id`
        `If chat_id is available, then ignore username and set the correct chat_id`
        `The file_upload_data in the response is what is used for uploading the file to cloudinary from client`
      parameters:
      - description: Message object
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/schemas.MessageCreateSchema'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/schemas.MessageCreateResponseSchema'
      security:
      - BearerAuth: []
      summary: Send a message
      tags:
      - Chat
  /feed/comments/{slug}:
    delete:
      description: This endpoint deletes a comment
      parameters:
      - description: Comment Slug
        in: path
        name: slug
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.ResponseSchema'
      security:
      - BearerAuth: []
      summary: Delete Comment
      tags:
      - Feed
    get:
      description: This endpoint retrieves a comment with replies
      parameters:
      - description: Comment Slug
        in: path
        name: slug
        required: true
        type: string
      - default: 1
        description: Current Page
        in: query
        name: page
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.CommentWithRepliesResponseSchema'
      summary: Retrieve Comment with replies
      tags:
      - Feed
    post:
      description: This endpoint creates a reply for a comment
      parameters:
      - description: Comment Slug
        in: path
        name: slug
        required: true
        type: string
      - description: Reply object
        in: body
        name: reply
        required: true
        schema:
          $ref: '#/definitions/schemas.CommentInputSchema'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/schemas.ReplyResponseSchema'
      security:
      - BearerAuth: []
      summary: Create Reply
      tags:
      - Feed
    put:
      description: This endpoint updates a comment
      parameters:
      - description: Comment Slug
        in: path
        name: slug
        required: true
        type: string
      - description: Comment object
        in: body
        name: comment
        required: true
        schema:
          $ref: '#/definitions/schemas.CommentInputSchema'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.CommentResponseSchema'
      security:
      - BearerAuth: []
      summary: Update Comment
      tags:
      - Feed
  /feed/posts:
    get:
      description: This endpoint retrieves paginated responses of latest posts
      parameters:
      - default: 1
        description: Current Page
        in: query
        name: page
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.PostsResponseSchema'
      summary: Retrieve Latest Posts
      tags:
      - Feed
    post:
      description: This endpoint creates a new post
      parameters:
      - description: Post object
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/schemas.PostInputSchema'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/schemas.PostInputResponseSchema'
      security:
      - BearerAuth: []
      summary: Create Post
      tags:
      - Feed
  /feed/posts/{slug}:
    delete:
      description: This endpoint deletes a post
      parameters:
      - description: Post slug
        in: path
        name: slug
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.ResponseSchema'
      security:
      - BearerAuth: []
      summary: Delete a Post
      tags:
      - Feed
    get:
      description: This endpoint retrieves a single post
      parameters:
      - description: Post slug
        in: path
        name: slug
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.PostResponseSchema'
      summary: Retrieve Single Post
      tags:
      - Feed
    put:
      description: This endpoint updates a post
      parameters:
      - description: Post slug
        in: path
        name: slug
        required: true
        type: string
      - description: Post object
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/schemas.PostInputSchema'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.PostInputResponseSchema'
      security:
      - BearerAuth: []
      summary: Update Post
      tags:
      - Feed
  /feed/posts/{slug}/comments:
    get:
      description: This endpoint retrieves comments of a particular post
      parameters:
      - description: Post Slug
        in: path
        name: slug
        required: true
        type: string
      - default: 1
        description: Current Page
        in: query
        name: page
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.CommentsResponseSchema'
      summary: Retrieve Post Comments
      tags:
      - Feed
    post:
      description: This endpoint creates a new comment for a particular post
      parameters:
      - description: Post Slug
        in: path
        name: slug
        required: true
        type: string
      - description: Comment object
        in: body
        name: comment
        required: true
        schema:
          $ref: '#/definitions/schemas.CommentInputSchema'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/schemas.CommentResponseSchema'
      security:
      - BearerAuth: []
      summary: Create Comment
      tags:
      - Feed
  /feed/reactions/{focus}/{slug}:
    get:
      description: This endpoint retrieves paginated responses of reactions of post,
        comment, reply
      parameters:
      - description: 'Specify the usage. Use any of the three: POST, COMMENT, REPLY'
        in: path
        name: focus
        required: true
        type: string
      - description: Enter the slug of the post or comment or reply
        in: path
        name: slug
        required: true
        type: string
      - default: 1
        description: Current Page
        in: query
        name: page
        type: integer
      - description: 'Reaction Type. Must be any of these: LIKE, LOVE, HAHA, WOW,
          SAD, ANGRY'
        in: query
        name: reaction_type
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.ReactionsResponseSchema'
      summary: Retrieve Latest Reactions of a Post, Comment, or Reply
      tags:
      - Feed
    post:
      description: This endpoint creates a new reaction.
      parameters:
      - description: 'Specify the usage. Use any of the three: POST, COMMENT, REPLY'
        in: path
        name: focus
        required: true
        type: string
      - description: Enter the slug of the post or comment or reply
        in: path
        name: slug
        required: true
        type: string
      - description: 'Reaction object. rtype should be any of these: LIKE, LOVE, HAHA,
          WOW, SAD, ANGRY'
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/schemas.ReactionInputSchema'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/schemas.ReactionResponseSchema'
      security:
      - BearerAuth: []
      summary: Create Reaction
      tags:
      - Feed
  /feed/reactions/{id}:
    delete:
      description: This endpoint deletes a reaction
      parameters:
      - description: Reaction id (uuid)
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.ResponseSchema'
      security:
      - BearerAuth: []
      summary: Remove Reaction
      tags:
      - Feed
  /feed/replies/{slug}:
    delete:
      description: This endpoint deletes a reply
      parameters:
      - description: Reply Slug
        in: path
        name: slug
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.ResponseSchema'
      security:
      - BearerAuth: []
      summary: Delete Reply
      tags:
      - Feed
    get:
      description: This endpoint retrieves a reply
      parameters:
      - description: Reply Slug
        in: path
        name: slug
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.ReplyResponseSchema'
      summary: Retrieve Reply
      tags:
      - Feed
    put:
      description: This endpoint updates a reply
      parameters:
      - description: Reply Slug
        in: path
        name: slug
        required: true
        type: string
      - description: Reply object
        in: body
        name: reply
        required: true
        schema:
          $ref: '#/definitions/schemas.CommentInputSchema'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.ReplyResponseSchema'
      security:
      - BearerAuth: []
      summary: Update Reply
      tags:
      - Feed
  /general/site-detail:
    get:
      description: This endpoint retrieves few details of the site/application.
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.SiteDetailResponseSchema'
      summary: Retrieve site details
      tags:
      - General
  /healthcheck:
    get:
      description: This endpoint checks the health of our application.
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.HealthCheckSchema'
      summary: HealthCheck
      tags:
      - HealthCheck
  /profiles:
    get:
      description: This endpoint retrieves a paginated list of users
      parameters:
      - default: 1
        description: Current Page
        in: query
        name: page
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.ProfilesResponseSchema'
      security:
      - BearerAuth: []
      summary: Retrieve Users
      tags:
      - Profiles
  /profiles/cities:
    get:
      description: This endpoint retrieves the first 10 cities that matches the query
        params
      parameters:
      - description: City name
        in: query
        name: name
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.CitiesResponseSchema'
      summary: Retrieve cities based on query params
      tags:
      - Profiles
  /profiles/friends:
    get:
      description: This endpoint retrieves friends of a user
      parameters:
      - default: 1
        description: Current Page
        in: query
        name: page
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.ProfilesResponseSchema'
      security:
      - BearerAuth: []
      summary: Retrieve Friends
      tags:
      - Profiles
  /profiles/friends/requests:
    get:
      description: This endpoint retrieves friend requests of a user
      parameters:
      - default: 1
        description: Current Page
        in: query
        name: page
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.ProfilesResponseSchema'
      security:
      - BearerAuth: []
      summary: Retrieve Friend Requests
      tags:
      - Profiles
    post:
      description: This endpoint sends or delete friend requests
      parameters:
      - description: Friend Request object
        in: body
        name: friend_request
        required: true
        schema:
          $ref: '#/definitions/schemas.SendFriendRequestSchema'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.ResponseSchema'
      security:
      - BearerAuth: []
      summary: Send Or Delete Friend Request
      tags:
      - Profiles
    put:
      description: This endpoint accepts or reject a friend request
      parameters:
      - description: Friend Request object
        in: body
        name: friend_request
        required: true
        schema:
          $ref: '#/definitions/schemas.AcceptFriendRequestSchema'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.ResponseSchema'
      security:
      - BearerAuth: []
      summary: Accept Or Reject a Friend Request
      tags:
      - Profiles
  /profiles/notifications:
    get:
      description: This endpoint retrieves a paginated list of auth user's notifications.
        Use post, comment, reply slug to navigate to the post, comment or reply.
      parameters:
      - default: 1
        description: Current Page
        in: query
        name: page
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.NotificationsResponseSchema'
      security:
      - BearerAuth: []
      summary: Retrieve User Notifications
      tags:
      - Profiles
    post:
      description: This endpoint reads a notification
      parameters:
      - description: Read Notification Data
        in: body
        name: read_data
        required: true
        schema:
          $ref: '#/definitions/schemas.ReadNotificationSchema'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.ResponseSchema'
      security:
      - BearerAuth: []
      summary: Read Notifications
      tags:
      - Profiles
  /profiles/profile:
    patch:
      description: This endpoint updates a user profile
      parameters:
      - description: Profile object
        in: body
        name: profile
        required: true
        schema:
          $ref: '#/definitions/schemas.ProfileUpdateSchema'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.ProfileResponseSchema'
      security:
      - BearerAuth: []
      summary: Update User Profile
      tags:
      - Profiles
    post:
      description: This endpoint deletes a particular user's account (irreversible)
      parameters:
      - description: Password
        in: body
        name: password
        required: true
        schema:
          $ref: '#/definitions/schemas.DeleteUserSchema'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.ResponseSchema'
      security:
      - BearerAuth: []
      summary: Delete User's Account
      tags:
      - Profiles
  /profiles/profile/{username}:
    get:
      description: This endpoint retrieves a user profile
      parameters:
      - description: Username of user
        in: path
        name: username
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.ProfileResponseSchema'
      summary: Retrieve User Profile
      tags:
      - Profiles
produces:
- application/json
securityDefinitions:
  BearerAuth:
    description: Type 'Bearer jwt_string' to correctly set the API Key
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
